[{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2019 LICENSE  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. EstimationTools Copyright (C) 2019 LICENSE This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jaimemosg.github.io/EstimationTools/articles/Bootstrap_implementation.html","id":"computation-of-standard-errors","dir":"Articles","previous_headings":"","what":"Computation of standard errors","title":"Bootstrap implementation","text":"Objects maxlogL class (outputs maxlogL maxlogLreg) stores estimated parameters probability density/mass functions Maximum Likelihood. variance-covariance matrix computed Fisher information matrix, obtained means Inverse Hessian matrix estimators: \\[\\begin{equation} Var(\\hat{\\boldsymbol{\\theta}}) = \\mathcal{J}^{-1}(\\hat{\\boldsymbol{\\theta}}) = C(\\hat{\\boldsymbol{\\theta}}), \\end{equation}\\] \\(\\mathcal{J}(\\hat{\\boldsymbol{\\theta}})\\) observed Fisher Information Matrix. Hence, standard errors can calculated square root diagonal elements matrix \\(C\\), follows: \\[\\begin{equation} SE(\\hat{\\boldsymbol{\\theta}}) = \\sqrt{C_{jj}(\\hat{\\boldsymbol{\\theta}})}, \\end{equation}\\] install package, type following commands: EstimationTools Hessian matrix computed following way: StdE_Method = optim, estimated optim function (option hessian = TRUE hood maxlogL maxlogLreg function). previous implementation fails user chooses StdE_Method = numDeriv, calculated hessian function numDeriv package. previous methods fail, standard errors computed bootstrapping function bootstrap_maxlogL. Additionally, EstimationTools allows implementation bootstrap standard error estimation, even Hessian computation fail.","code":"if (!require('devtools')) install.packages('devtools') devtools::install_github('Jaimemosg/EstimationTools', force = TRUE)"},{"path":"https://jaimemosg.github.io/EstimationTools/articles/Bootstrap_implementation.html","id":"standard-error-with-maxlogl-function","dir":"Articles","previous_headings":"","what":"Standard Error with maxlogL function","title":"Bootstrap implementation","text":"Lets fit following distribution: \\[ \\begin{aligned} X &\\sim N(\\mu, \\:\\sigma^2) \\\\ \\mu &= 160 \\quad (\\verb|mean|) \\\\ \\sigma &= 6 \\quad (\\verb|sd|) \\end{aligned} \\] following chunk illustrates fitting Hessian computation via optim: Note Hessian computed issues. Now, lets check aforementioned feature maxlogL: user can implement bootstrap algorithm available bootstrap_maxlogL function. illustrate , going create another object theta_2: Notice Standard Errors calculated optim (\\(0.042218\\)) calculated bootstrap implementation (\\(0.042735\\)) approximately equals, identical.","code":"library(EstimationTools)  x <- rnorm(n = 10000, mean = 160, sd = 6) theta_1 <- maxlogL(x = x, dist = 'dnorm', control = list(trace = 1),                    link = list(over = \"sd\", fun = \"log_link\"),                    fixed = list(mean = 160)) #>   0:     43310.561:  1.00000 #>   1:     32453.831:  2.00000 #>   2:     32212.870:  1.91681 #>   3:     32067.654:  1.75552 #>   4:     32057.822:  1.79102 #>   5:     32057.646:  1.78696 #>   6:     32057.646:  1.78682 #>   7:     32057.646:  1.78683 summary(theta_1) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>        AIC      BIC #>   64115.29 64115.29 #> _______________________________________________________________ #>    Estimate  Std. Error Z value Pr(>|z|)     #> sd   5.97047    0.04222   141.4   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---  ## Hessian print(theta_1$fit$hessian) #>          [,1] #> [1,] 561.0644  ## Standard errors print(theta_1$fit$StdE) #> [1] 0.04221761 print(theta_1$outputs$StdE_Method) #> [1] \"Hessian from optim\" # Bootstrap theta_2 <- maxlogL(x = x, dist = 'dnorm', control = list(trace = 1),                    link = list(over = \"sd\", fun = \"log_link\"),                    fixed = list(mean = 160)) #>   0:     43310.561:  1.00000 #>   1:     32453.831:  2.00000 #>   2:     32212.870:  1.91681 #>   3:     32067.654:  1.75552 #>   4:     32057.822:  1.79102 #>   5:     32057.646:  1.78696 #>   6:     32057.646:  1.78682 #>   7:     32057.646:  1.78683 bootstrap_maxlogL(theta_2, R = 200) #>  #> ...Bootstrap computation of Standard Error. Please, wait a few minutes... #>  #>  --> Done <--- summary(theta_2) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Bootstrap  #> _______________________________________________________________ #>        AIC      BIC #>   64115.29 64115.29 #> _______________________________________________________________ #>    Estimate  Std. Error Z value Pr(>|z|)     #> sd   5.97047    0.04274   139.7   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---  ## Hessian print(theta_2$fit$hessian) #>          [,1] #> [1,] 561.0644  ## Standard errors print(theta_2$fit$StdE) #> [1] 0.04273504 print(theta_2$outputs$StdE_Method) #> [1] \"Bootstrap\""},{"path":"https://jaimemosg.github.io/EstimationTools/articles/Examples.html","id":"estimation-in-regression-models","dir":"Articles","previous_headings":"","what":"Estimation in regression models","title":"Estimation with `maxlogL` objects","text":"generate data hypothetical failure test approximately 641 hours 40 experimental units, 20 group 1 20 group 2. Lets assume censorship rate 10%, regard data right censored. Six 20 data points shown just bellow: model follows: \\[ f(t|\\alpha, k) = \\frac{\\alpha}{k} \\left(\\frac{t}{k}\\right)^{\\alpha-1} \\exp\\left[-\\left(\\frac{t}{k}\\right)^{\\alpha}\\right] \\] \\[ \\begin{aligned} T &\\stackrel{\\text{iid.}}{\\sim} WEI(\\alpha,\\: k), \\\\ \\log(\\alpha) &= 1.2 + 0.1 \\times group \\quad  (\\verb|shape|),\\\\ k &= 500 \\quad (\\verb|scale|). \\end{aligned} \\] implementation solution printed :","code":"if (!require('readr')) install.packages('readr') library(readr)  urlRemote <- \"https://raw.githubusercontent.com/\" pathGithub <- 'Jaimemosg/EstimationTools/master/extra/' filename <- 'sim_wei.csv' myURL <- paste0(urlRemote, pathGithub, filename) data_sim <- read_csv(myURL)  data_sim$group <- as.factor(data_sim$group) head(data_sim) #> # A tibble: 6 × 4 #>   label  Time status group #>   <dbl> <dbl>  <dbl> <fct> #> 1     2  173.      1 2     #> 2     5  199.      1 1     #> 3    13  285.      1 1     #> 4    18  290.      1 1     #> 5    20  293.      1 1     #> 6    15  304.      1 1 library(EstimationTools)  # Formulas with linear predictors formulas <- list(scale.fo = ~ 1, shape.fo = ~ group)  # The model fit_wei <- maxlogLreg(formulas, data = data_sim,                       y_dist = Surv(Time, status) ~ dweibull,                       link = list(over = c(\"shape\", \"scale\"),                                   fun = rep(\"log_link\", 2))) summary(fit_wei) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>        AIC      BIC #>   472.4435 477.5101 #> _______________________________________________________________ #> Fixed effects for log(shape)  #> --------------------------------------------------------------- #>             Estimate Std. Error Z value  Pr(>|z|)     #> (Intercept)  1.16587    0.19956  5.8422 5.152e-09 *** #> group2       0.30861    0.28988  1.0646    0.2871     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> _______________________________________________________________ #> Fixed effects for log(scale)  #> --------------------------------------------------------------- #>             Estimate Std. Error Z value  Pr(>|z|)     #> (Intercept) 6.255290   0.046286  135.14 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---"},{"path":"https://jaimemosg.github.io/EstimationTools/articles/Examples.html","id":"estimation-in-distributions","dir":"Articles","previous_headings":"","what":"Estimation in distributions","title":"Estimation with `maxlogL` objects","text":"\\[ \\begin{aligned} X &\\sim N(\\mu, \\:\\sigma^2), \\\\ \\mu &= 160 \\quad (\\verb|mean|), \\\\ \\sigma &= 6 \\quad (\\verb|sd|). \\end{aligned} \\] solution data set generated size \\(n=10000\\) showed ","code":"x <- rnorm( n = 10000, mean = 160, sd = 6 ) fit <- maxlogL( x = x, dist = \"dnorm\", link = list(over = \"sd\", fun = \"log_link\") ) summary(fit) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>        AIC      BIC #>   64280.15 64294.57 #> _______________________________________________________________ #>      Estimate  Std. Error Z value Pr(>|z|)     #> mean 160.05931    0.06019  2659.4   <2e-16 *** #> sd     6.01868    0.04256   141.4   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---"},{"path":"https://jaimemosg.github.io/EstimationTools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jaime Mosquera. Author, maintainer. Freddy Hernandez. Contributor.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mosquera J (2023). EstimationTools: Maximum Likelihood Estimation Probability Functions Data Sets. https://jaimemosg.github.io/EstimationTools/, https://github.com/Jaimemosg/EstimationTools.","code":"@Manual{,   title = {EstimationTools: Maximum Likelihood Estimation for Probability Functions from Data Sets},   author = {Jaime Mosquera},   year = {2023},   note = {https://jaimemosg.github.io/EstimationTools/, https://github.com/Jaimemosg/EstimationTools}, }"},{"path":"https://jaimemosg.github.io/EstimationTools/index.html","id":"estimationtools-","dir":"","previous_headings":"","what":"Maximum Likelihood Estimation for Probability Functions from Data Sets","title":"Maximum Likelihood Estimation for Probability Functions from Data Sets","text":"goal EstimationTools provide tools routines maximum likelihood estimation probability density/mass functions R.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Maximum Likelihood Estimation for Probability Functions from Data Sets","text":"can install latest version (4.1.1.9000) EstimationTools typing following command lines R console: can install released version (4.0.0) CRAN prefer. can also type following command lines R console: can visit package website explore functions reference vignettes (articles).","code":"if (!require('devtools')) install.packages('devtools') devtools::install_github('Jaimemosg/EstimationTools', force = TRUE) library(EstimationTools) install.packages(\"EstimationTools\")"},{"path":"https://jaimemosg.github.io/EstimationTools/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Maximum Likelihood Estimation for Probability Functions from Data Sets","text":"can visit estimation vignette see examples.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/Fibers.html","id":null,"dir":"Reference","previous_headings":"","what":"Tensile strengths — Fibers","title":"Tensile strengths — Fibers","text":"Tensile strengths (GPa) 69 specimens carbon fiber tested tension gauge lengths 20 mm.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/Fibers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tensile strengths — Fibers","text":"","code":"Fibers"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/Fibers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tensile strengths — Fibers","text":"data frame 69 observations.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/Fibers.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tensile strengths — Fibers","text":"Ghitany , Al-Mutairi DK, Balakrishnan N, Al-Enezi LJ (2013). “Power Lindley distribution associated inference.” Computational Statistics Data Analysis, 64, 20--33. ISSN 01679473, doi:10.1016/j.csda.2013.02.026 , http://dx.doi.org/10.1016/j.csda.2013.02.026.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/Fibers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tensile strengths — Fibers","text":"","code":"data(Fibers) hist(Fibers$Strenght, main=\"\", xlab=\"Strength (GPa)\")"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/Hazard_Shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Hazard shape extracted from HazardShape objects — Hazard_Shape","title":"Hazard shape extracted from HazardShape objects — Hazard_Shape","text":"function displays estimated hazard shape given data set.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/Hazard_Shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hazard shape extracted from HazardShape objects — Hazard_Shape","text":"","code":"Hazard_Shape(object)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/Hazard_Shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hazard shape extracted from HazardShape objects — Hazard_Shape","text":"object object class HazardShape, generated TTT_hazard_shape.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/Hazard_Shape.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hazard shape extracted from HazardShape objects — Hazard_Shape","text":"Jaime Mosquera Gutiérrez jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/Hazard_Shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hazard shape extracted from HazardShape objects — Hazard_Shape","text":"","code":"#-------------------------------------------------------------------------------- # Example 1: Increasing hazard and its corresponding TTT plot with simulated data  hweibull <- function(x, shape, scale){   dweibull(x, shape, scale)/pweibull(x, shape, scale, lower.tail = FALSE)   } curve(hweibull(x, shape = 2.5, scale = pi), from = 0, to = 42,                col = \"red\", ylab = \"Hazard function\", las = 1, lwd = 2)   y <- rweibull(n = 50, shape = 2.5, scale = pi) my_initial_guess <- TTT_hazard_shape(formula = y ~ 1) Hazard_Shape(my_initial_guess) #> Warning: `Hazard_Shape()` was deprecated in EstimationTools 2.2.0. #> ℹ Please use `print.HazardShape()` instead. #> -------------------------------------------------------------------- #> Hazard shape: Increasing #> -------------------------------------------------------------------- #> Warning: Non-parametric estimate for Empirical TTT is irregular. #> Please, use the 'plot()' method to see the TTT shape   #--------------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/NegInv_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Negative inverse link function (for estimation with maxlogL object) — NegInv_link","title":"Negative inverse link function (for estimation with maxlogL object) — NegInv_link","text":"NegInv_link object provides way implement negative inverse link function maxlogL needs perform estimation. See documentation maxlogL information parameter estimation implementation link objects.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/NegInv_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Negative inverse link function (for estimation with maxlogL object) — NegInv_link","text":"","code":"NegInv_link()"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/NegInv_link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Negative inverse link function (for estimation with maxlogL object) — NegInv_link","text":"list negative inverse link function, inverse name.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/NegInv_link.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Negative inverse link function (for estimation with maxlogL object) — NegInv_link","text":"NegInv_link part family generic functions input arguments defines returns list details link function: name: character string name link function. g: implementation link function generic function R. g_inv: implementation inverse link function generic function R. way add new mapping functions. user must specify details aforesaid.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/NegInv_link.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Negative inverse link function (for estimation with maxlogL object) — NegInv_link","text":"","code":"# Estimation of rate parameter in exponential distribution T <- rexp(n = 1000, rate = 3) lambda <- maxlogL(x = T, dist = \"dexp\", start = 5,                   link = list(over = \"rate\", fun = \"NegInv_link\")) summary(lambda) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>        AIC       BIC #>   -280.973 -276.0652 #> _______________________________________________________________ #>      Estimate  Std. Error Z value Pr(>|z|)     #> rate   3.13142    0.09902   31.62   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---  # Link function name fun <- NegInv_link()$name print(fun) #> [1] \"NegInv\"  # Link function g <- NegInv_link()$g curve(g(x), from = 0.1, to = 1)   # Inverse link function ginv <- NegInv_link()$g_inv curve(ginv(x), from = 0.1, to = 1)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/TTTE_Analytical.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical Total Time on Test (TTT), analytic version. — TTTE_Analytical","title":"Empirical Total Time on Test (TTT), analytic version. — TTTE_Analytical","text":"function allows compute TTT curve formula containing factor type variable (classification variable).","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/TTTE_Analytical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical Total Time on Test (TTT), analytic version. — TTTE_Analytical","text":"","code":"TTTE_Analytical(   formula,   response = NULL,   scaled = TRUE,   data = NULL,   method = c(\"Barlow\", \"censored\"),   partition_method = NULL,   silent = FALSE,   ... )"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/TTTE_Analytical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical Total Time on Test (TTT), analytic version. — TTTE_Analytical","text":"formula object class formula response left operator ~. right side can factor variable term 1 classification factor levels desired. response optional numeric vector data response variable. Using argument equivalent define formula right side ~ 1. See fourth example . scaled logical. TRUE (default value), scaled TTT computed. data optional data frame containing variables (response factor, desired). data specified, variables taken environment TTT_analytical called. method character specifying method computation. two options available: 'Barlow' 'censored'. information can found Details section. partition_method list specifying cluster formation covariate formula numeric, data several covariates. 'quantile-based' method one currently available (See last example). silent logical. TRUE, warnings TTTE_Analytical suppressed. ... arguments passing survfit.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/TTTE_Analytical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical Total Time on Test (TTT), analytic version. — TTTE_Analytical","text":"list class object Empirical.TTT containing list following information: /n` matrix containing empirical quantiles. matrix number columns equals number levels factor considered (number strata). phi_n matrix containing values empirical TTT. matrix number columns equals number levels factor considered (number strata). strata numeric named vector storing number observations per strata, name strata (names levels factor).","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/TTTE_Analytical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Empirical Total Time on Test (TTT), analytic version. — TTTE_Analytical","text":"method argument set 'Barlow', function uses original expression empirical TTT presented Barlow (1979)   used Aarset (1987) : $$\\phi_n\\left( \\frac{r}{n}\\right) = \\frac{\\left( \\sum_{=1}^{r} T_{()} \\right) + (n-r)T_{(r)}}{\\sum_{=1}^{n} T_i}$$ \\(T_{(r)}\\) \\(r^{th}\\) order statistic, \\(r=1,2,\\dots, n\\), \\(n\\) sample size. hand, option 'censored' implementation based integrals presented Westberg Klefsjö (1994) , using survfit compute Kaplan-Meier estimator: $$\\phi_n\\left( \\frac{r}{n}\\right) = \\sum_{j=1}^{r} \\left[ \\prod_{=1}^{j} \\left( 1 - \\frac{d_i}{n_i}\\right) \\right] \\left(T_{(j)} - T_{(j-1)} \\right)$$","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/TTTE_Analytical.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Empirical Total Time on Test (TTT), analytic version. — TTTE_Analytical","text":"Barlow RE (1979). “Geometry total time test transform.” Naval Research Logistics Quarterly, 26(3), 393--402. ISSN 00281441, doi:10.1002/nav.3800260303 . Aarset MV (1987). “Identify Bathtub Hazard Rate.” IEEE Transactions Reliability, R-36(1), 106--108. ISSN 15581721, doi:10.1109/TR.1987.5222310 . Klefsjö B (1991). “TTT-plotting - tool theoretical practical problems.” Journal Statistical Planning Inference, 29(1-2), 99--110. ISSN 03783758, doi:10.1016/0378-3758(92)90125-C , https://linkinghub.elsevier.com/retrieve/pii/037837589290125C. Westberg U, Klefsjö B (1994). “TTT-plotting censored data based piecewise exponential estimator.” International Journal Reliability, Quality Safety Engineering, 01(01), 1--13. ISSN 0218-5393, doi:10.1142/S0218539394000027 , https://www.worldscientific.com/doi/abs/10.1142/S0218539394000027.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/TTTE_Analytical.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Empirical Total Time on Test (TTT), analytic version. — TTTE_Analytical","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/TTTE_Analytical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical Total Time on Test (TTT), analytic version. — TTTE_Analytical","text":"","code":"library(EstimationTools)  #-------------------------------------------------------------------------------- # Example 1: Scaled empirical TTT from 'mgus1' data from 'survival' package.  TTT_1 <- TTTE_Analytical(Surv(stop, event == 'pcm') ~1, method = 'cens',                          data = mgus1, subset=(start == 0)) head(TTT_1$`i/n`) #>             [,1] #> [1,] 0.000000000 #> [2,] 0.004219409 #> [3,] 0.008438819 #> [4,] 0.012658228 #> [5,] 0.016877637 #> [6,] 0.021097046 head(TTT_1$phi_n) #>              [,1] #> [1,] 0.0000000000 #> [2,] 0.0006028396 #> [3,] 0.0007033129 #> [4,] 0.0031146713 #> [5,] 0.0032151446 #> [6,] 0.0039184574 print(TTT_1$strata) #> SingleGroup  #>         237    #-------------------------------------------------------------------------------- # Example 2: Scaled empirical TTT using a factor variable with 'aml' data # from 'survival' package.  TTT_2 <- TTTE_Analytical(Surv(time, status) ~ x, method = \"cens\", data = aml) head(TTT_2$`i/n`) #>      [,1] [,2] #> [1,]  0.0  0.0 #> [2,]  0.1  0.1 #> [3,]  0.2  0.2 #> [4,]  0.3  0.3 #> [5,]  0.4  0.4 #> [6,]  0.5  0.5 head(TTT_2$phi_n) #>           [,1]      [,2] #> [1,] 0.0000000 0.0000000 #> [2,] 0.1664586 0.2286585 #> [3,] 0.2330420 0.3384146 #> [4,] 0.3058677 0.4664634 #> [5,] 0.3682896 0.5945122 #> [6,] 0.4307116 0.7812500 print(TTT_2$strata) #>    x=Maintained x=Nonmaintained  #>              10              10   #-------------------------------------------------------------------------------- # Example 3: Non-scaled empirical TTT without a factor (arbitrarily simulated # data).  set.seed(911211) y <- rweibull(n=20, shape=1, scale=pi) TTT_3 <- TTTE_Analytical(y ~ 1, scaled = FALSE) head(TTT_3$`i/n`) #>      [,1] #> [1,] 0.00 #> [2,] 0.05 #> [3,] 0.10 #> [4,] 0.15 #> [5,] 0.20 #> [6,] 0.25 head(TTT_3$phi_n) #>          [,1] #> [1,]  0.00000 #> [2,]  2.75529 #> [3,] 11.11551 #> [4,] 18.07959 #> [5,] 18.71795 #> [6,] 31.26945 print(TTT_3$strata) #> SingleGroup  #>          20    #-------------------------------------------------------------------------------- # Example 4: non-scaled empirical TTT without a factor (arbitrarily simulated # data) using the 'response' argument (this is equivalent to Third example).  set.seed(911211) y <- rweibull(n=20, shape=1, scale=pi) TTT_4 <- TTTE_Analytical(response = y, scaled = FALSE) head(TTT_4$`i/n`) #>      [,1] #> [1,] 0.00 #> [2,] 0.05 #> [3,] 0.10 #> [4,] 0.15 #> [5,] 0.20 #> [6,] 0.25 head(TTT_4$phi_n) #>          [,1] #> [1,]  0.00000 #> [2,]  2.75529 #> [3,] 11.11551 #> [4,] 18.07959 #> [5,] 18.71795 #> [6,] 31.26945 print(TTT_4$strata) #> SingleGroup  #>          20   #-------------------------------------------------------------------------------- # Eample 5: empirical TTT with a continuously variant term for the shape # parameter in Weibull distribution.  x <- runif(50, 0, 10) shape <- 0.1 + 0.1*x y <- rweibull(n = 50, shape = shape, scale = pi)  partitions <- list(method='quantile-based',                    folds=5) TTT_5 <- TTTE_Analytical(y ~ x, partition_method = partitions) head(TTT_5$`i/n`) #>      [,1] [,2]      [,3] [,4]       [,5] #> [1,]  0.0  0.0 0.0000000  0.0 0.00000000 #> [2,]  0.1  0.1 0.1111111  0.1 0.09090909 #> [3,]  0.2  0.2 0.2222222  0.2 0.18181818 #> [4,]  0.3  0.3 0.3333333  0.3 0.27272727 #> [5,]  0.4  0.4 0.4444444  0.4 0.36363636 #> [6,]  0.5  0.5 0.5555556  0.5 0.45454545 head(TTT_5$phi_n) #>              [,1]         [,2]        [,3]       [,4]      [,5] #> [1,] 0.000000e+00 0.000000e+00 0.000000000 0.00000000 0.0000000 #> [2,] 3.504795e-12 5.299343e-05 0.003731963 0.03130920 0.1223746 #> [3,] 1.947594e-05 1.832447e-04 0.037832816 0.04772633 0.1351480 #> [4,] 3.049633e-05 4.363692e-02 0.046967393 0.19219833 0.2081466 #> [5,] 2.272533e-03 5.940729e-02 0.137048565 0.31129899 0.2211766 #> [6,] 5.465541e-03 1.223577e-01 0.267788829 0.36523953 0.3802610 print(TTT_5$strata) #> [0.07 - 2.23) [2.23 - 3.84) [3.84 - 5.01) [5.01 - 6.93) [6.93 - 9.73]  #>            10            10             9            10            11  plot(TTT_5) # Observe changes in Empirical TTT   #--------------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/TTT_hazard_shape.html","id":null,"dir":"Reference","previous_headings":"","what":"Hazard Shape estimation from TTT plot — TTT_hazard_shape","title":"Hazard Shape estimation from TTT plot — TTT_hazard_shape","text":"function can used estimate hazard shape corresponding given data set. wrapper TTTE_Analytical.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/TTT_hazard_shape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hazard Shape estimation from TTT plot — TTT_hazard_shape","text":"","code":"TTT_hazard_shape(object, ...)  # S3 method for formula TTT_hazard_shape(   formula,   data = NULL,   local_reg = loess.options(),   interpolation = interp.options(),   silent = FALSE,   ... )  # S3 method for EmpiricalTTT TTT_hazard_shape(   object,   local_reg = loess.options(),   interpolation = interp.options(),   silent = FALSE,   ... )"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/TTT_hazard_shape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hazard Shape estimation from TTT plot — TTT_hazard_shape","text":"object alternative way getting hazard shape estimation passing directly EmpiricalTTT object generated TTTE_Analytical. ... arguments passed TTTE_Analytical. formula object class formula response left operator ~. right side must 1. data optional data frame containing response variables. data specified, variables taken environment TTT_hazard_shape called. local_reg list control parameters LOESS. See loess.options. interpolation list control parameters interpolation function. See interp.options. silent logical. TRUE, warnings TTT_hazard_shape suppressed.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/TTT_hazard_shape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hazard Shape estimation from TTT plot — TTT_hazard_shape","text":"function performs non-parametric estimation empirical total time test (TTT) plot. , estimated curve can used get suggestions initial values search region parameters based hazard shape associated  shape empirical TTT plot. Use Hazard_Shape function get results shape estimation.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/TTT_hazard_shape.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hazard Shape estimation from TTT plot — TTT_hazard_shape","text":"Jaime Mosquera Gutiérrez jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/TTT_hazard_shape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hazard Shape estimation from TTT plot — TTT_hazard_shape","text":"","code":"#-------------------------------------------------------------------------------- # Example 1: Increasing hazard and its corresponding TTT statistic with #            simulated data  hweibull <- function(x, shape, scale){   dweibull(x, shape, scale)/pweibull(x, shape, scale, lower.tail = FALSE)   } curve(hweibull(x, shape = 2.5, scale = pi), from = 0, to = 42,                col = \"red\", ylab = \"Hazard function\", las = 1, lwd = 2)  y <- rweibull(n = 50, shape = 2.5, scale = pi) status <- c(rep(1, 48), rep(0, 2)) my_initial_guess1 <- TTT_hazard_shape(Surv(y, status) ~ 1) my_initial_guess1$hazard_type #> [1] \"Increasing\"   #-------------------------------------------------------------------------------- # Example 2: Same example using an 'EmpiricalTTT' object  y <- rweibull(n = 50, shape = 2.5, scale = pi) TTT_wei <- TTTE_Analytical(y ~ 1) my_initial_guess2 <- TTT_hazard_shape(TTT_wei) my_initial_guess2$hazard_type #> [1] \"Increasing\"   #-------------------------------------------------------------------------------- # Example 3: Increasing hazard with simulated censored data  hweibull <- function(x, shape, scale){   dweibull(x, shape, scale)/pweibull(x, shape, scale, lower.tail = FALSE)   } curve(hweibull(x, shape = 2.5, scale = pi), from = 0, to = 42,                col = \"red\", ylab = \"Hazard function\", las = 1, lwd = 2)   y <- rweibull(n = 50, shape = 2.5, scale = pi) y <- sort(y) status <- c(rep(1, 45), rep(0, 5)) my_initial_guess1 <- TTT_hazard_shape(Surv(y, status) ~ 1) my_initial_guess1$hazard_type #> [1] \"Increasing\"   #--------------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/bootstrap_maxlogL.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap computation of standard error for maxlogL class objects. — bootstrap_maxlogL","title":"Bootstrap computation of standard error for maxlogL class objects. — bootstrap_maxlogL","text":"bootstrap_maxlogL computes standard errors maxlogL class objects non-parametric bootstrap.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/bootstrap_maxlogL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap computation of standard error for maxlogL class objects. — bootstrap_maxlogL","text":"","code":"bootstrap_maxlogL(object, R = 2000, silent = FALSE, ...)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/bootstrap_maxlogL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap computation of standard error for maxlogL class objects. — bootstrap_maxlogL","text":"object object maxlogL class whose standard errors going computed bootstrap. R numeric. number resamples performed dataset bootstrap computation. Default value 2000. silent logical. TRUE, notifications bootstrap_maxlogL suppressed. ... arguments passed boot used routine estimation standard errors.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/bootstrap_maxlogL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap computation of standard error for maxlogL class objects. — bootstrap_maxlogL","text":"modified object class maxlogL.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/bootstrap_maxlogL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap computation of standard error for maxlogL class objects. — bootstrap_maxlogL","text":"computation performed function may invoked Hessian optim hessian fail  maxlogL maxlogLreg. However, function can run even Hessian matrix calculation fails. case, standard errors maxlogL class object replaced.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/bootstrap_maxlogL.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap computation of standard error for maxlogL class objects. — bootstrap_maxlogL","text":"Canty , Ripley BD (2017). boot: Bootstrap R (S-Plus) Functions.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/bootstrap_maxlogL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrap computation of standard error for maxlogL class objects. — bootstrap_maxlogL","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/bootstrap_maxlogL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap computation of standard error for maxlogL class objects. — bootstrap_maxlogL","text":"","code":"library(EstimationTools)  #-------------------------------------------------------------------------------- # First example: Comparison between standard error computation via Hessian matrix # and standard error computation via bootstrap  N <- rbinom(n = 100, size = 10, prob = 0.3) phat1 <- maxlogL(x = N, dist = 'dbinom', fixed = list(size = 10),                 link = list(over = \"prob\", fun = \"logit_link\"))  ## Standard error computation method and results print(phat1$outputs$StdE_Method)   # Hessian #> [1] \"Hessian from optim\" summary(phat1) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>       AIC     BIC #>   337.521 337.521 #> _______________________________________________________________ #>      Estimate  Std. Error Z value Pr(>|z|)     #> prob   0.28200    0.01423   19.82   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---  ## 'bootstrap_maxlogL' implementation phat2 <- phat1                   # Copy the first 'maxlogL' object bootstrap_maxlogL(phat2, R = 100) #>  #> ...Bootstrap computation of Standard Error. Please, wait a few minutes... #>  #>  #>  --> Done <---   ## Standard error computation method and results print(phat2$outputs$StdE_Method)   # Bootstrap #> [1] \"Bootstrap\" summary(phat2) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Bootstrap  #> _______________________________________________________________ #>       AIC     BIC #>   337.521 337.521 #> _______________________________________________________________ #>      Estimate  Std. Error Z value Pr(>|z|)     #> prob   0.28200    0.01354   20.82   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---   #--------------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/coef.maxlogL.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Model Coefficients in a maxlogL Fits — coef.maxlogL","title":"Extract Model Coefficients in a maxlogL Fits — coef.maxlogL","text":"coef.maxlogL specific method generic function coef extracts model coefficients objects returned maxlogLreg. coefficients alias coef.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/coef.maxlogL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Model Coefficients in a maxlogL Fits — coef.maxlogL","text":"","code":"# S3 method for maxlogL coef(object, parameter = object$outputs$par_names, ...)  coefMany(object, parameter = NULL, ...)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/coef.maxlogL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Model Coefficients in a maxlogL Fits — coef.maxlogL","text":"object object maxlogL class generated maxlogLreg function. parameter character specifies parameter required. coefMany argument can atomic vector two names parameters. ... arguments.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/coef.maxlogL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Model Coefficients in a maxlogL Fits — coef.maxlogL","text":"named vector coefficients specified distribution parameter.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/coef.maxlogL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract Model Coefficients in a maxlogL Fits — coef.maxlogL","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/coef.maxlogL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Model Coefficients in a maxlogL Fits — coef.maxlogL","text":"","code":"library(EstimationTools)  #-------------------------------------------------------------------------------- # Example 1: coefficients from a model using a simulated normal distribution n <- 1000 x <- runif(n = n, -5, 6) y <- rnorm(n = n, mean = -2 + 3 * x, sd = exp(1 + 0.3* x)) norm_data <- data.frame(y = y, x = x)  # It does not matter the order of distribution parameters formulas <- list(sd.fo = ~ x, mean.fo = ~ x)  norm_mod <- maxlogLreg(formulas, y_dist = y ~ dnorm, data = norm_data,                        link = list(over = \"sd\", fun = \"log_link\")) coef(norm_mod) #> (Intercept)           x  #>   -1.988339    3.016877  coef(norm_mod, parameter = 'sd') #> (Intercept)           x  #>   0.9915188   0.2980795  a <- coefMany(norm_mod, parameter = c('mean', 'sd')) b <- coefMany(norm_mod) identical(a, b) #> [1] TRUE   #-------------------------------------------------------------------------------- # Example 2: Parameters in estimation with one fixed parameter x <- rnorm(n = 10000, mean = 160, sd = 6) theta_1 <- maxlogL(x = x, dist = 'dnorm', control = list(trace = 1),                  link = list(over = \"sd\", fun = \"log_link\"),                  fixed = list(mean = 160)) #>   0:     43196.673:  1.00000 #>   1:     32438.418:  2.00000 #>   2:     32192.032:  1.91567 #>   3:     32044.437:  1.75247 #>   4:     32034.170:  1.78879 #>   5:     32033.983:  1.78460 #>   6:     32033.983:  1.78446 #>   7:     32033.983:  1.78446 coef(theta_1) #>       sd  #> 5.956361    #--------------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/cum_hazard_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative hazard functions for any distribution — cum_hazard_fun","title":"Cumulative hazard functions for any distribution — cum_hazard_fun","text":"function takes maxlogL hazard function computes cumulative hazard function.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/cum_hazard_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative hazard functions for any distribution — cum_hazard_fun","text":"","code":"cum_hazard_fun(   distr,   support = NULL,   method = c(\"log_sf\", \"integration\"),   routine = NULL )"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/cum_hazard_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative hazard functions for any distribution — cum_hazard_fun","text":"distr length-one character vector name density/mass function interest. support list following entries: interval: two dimensional atomic vector indicating set possible values random variable distribution specified y_dist. type: character indicating distribution discrete continous random variable. method character function; \"log_sf\", cumulative hazard function (CHF) computed using expression \\(H(t) = -\\log (S(t))\\); \"integrate_hf\", CHF computed integral hazard function. routine character specifying integration routine. integrate gauss_quad available continuous distributions, summate discrete ones. Custom routines can defined must compatible integration API.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/cum_hazard_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative hazard functions for any distribution — cum_hazard_fun","text":"function following input arguments: x vector (non-negative) quantiles. ... Arguments probability density/mass function.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/cum_hazard_fun.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cumulative hazard functions for any distribution — cum_hazard_fun","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/cum_hazard_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative hazard functions for any distribution — cum_hazard_fun","text":"","code":"library(EstimationTools)  #---------------------------------------------------------------------------- # Example 1: Cumulative hazard function of the Weibull distribution. support <- list(interval=c(0, Inf), type='continuous')  # Cumuative hazard function in the 'maxlogL' framework Hweibull1 <- cum_hazard_fun(   distr = 'dweibull',   support = support,   method = \"integration\"  )   Hweibull2 <- cum_hazard_fun(   distr = 'dweibull',   support = support,   method = \"log_sf\"  )  # Compute cumulative hazard function from scratch # Recall h(x) = shape/scale * (x/scale)^(shape - 1), then # H(x) = (x/scale)^shape  Hweibull3 <- function(x, scale, shape){   (x/scale)^shape }  # Comparison Hweibull1(0.2, shape = 2, scale = 1)  # using H(t) = -log(S(t)) #> [1] 0.04 Hweibull2(0.2, shape = 2, scale = 1)  # integrating h(t) #> [1] 0.04 Hweibull3(0.2, shape = 2, scale = 1)  # raw version #> [1] 0.04   #----------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/expected_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected value of a given function for any distribution — expected_value","title":"Expected value of a given function for any distribution — expected_value","text":"function takes name probability density/mass function argument creates function compute expected value.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/expected_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected value of a given function for any distribution — expected_value","text":"","code":"expected_value(f, parameters, support, g = identity, routine = NULL, ...)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/expected_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected value of a given function for any distribution — expected_value","text":"f character probability density/mass function name. function must availble R environment using usual nomenclature (d prefix name). parameters list input parameters distribution. support list following entries: interval: two dimensional atomic vector indicating set possible values random variable distribution specified y_dist. type: character indicating distribution discrete continous random variable. g given function \\(g(x)\\). g = identity, \\(g(x) = x\\) actually mean distribution. routine character specifying integration routine. integrate gauss_quad available continuous distributions, summate discrete ones. Custom routines can defined must compatible integration API. ... arguments integration routine.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/expected_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected value of a given function for any distribution — expected_value","text":"expected value specified distribution.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/expected_value.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Expected value of a given function for any distribution — expected_value","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/expected_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected value of a given function for any distribution — expected_value","text":"","code":"library(EstimationTools)  #---------------------------------------------------------------------------- # Example 1: mean of X ~ N(2, 1) using 'integrate' under the hood. support <- list(interval=c(-Inf, Inf), type = \"continuous\")  expected_value(   f = \"dnorm\",   parameters = list(mean = 2, sd = 1),   support = support ) #> [1] 2  # Equivalent to expected_value(   f = \"dnorm\",   parameters = list(mean = 2, sd = 1),   support = support,   g = identity,   routine = \"integrate\" ) #> [1] 2  # Example 1: mean of X ~ N(22, 1)  # 'integrate' fails because the mean is 22. expected_value(   f = \"dnorm\",   parameters = list(mean = 22, sd = 1),   support = support ) #> [1] 9.111217e-08  # Let's compute with Monte Carlo integration expected_value(   f = \"dnorm\",   parameters = list(mean = 22, sd = 1),   support = support,   routine = \"monte-carlo\" ) #> [1] 22.00125  # Compute Monte Carlo integration with more samples # \\donttest{ expected_value(   f = \"dnorm\",   parameters = list(mean = 22, sd = 1),   support = support,   routine = \"monte-carlo\",   n = 1e8 ) #> [1] 22.00005 # }  #----------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/expected_value.maxlogL.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected value of a given function for maxlogLreg models. — expected_value.maxlogL","title":"Expected value of a given function for maxlogLreg models. — expected_value.maxlogL","text":"function takes maxlogL model computes expected value using estimated parameters. expected value computed using following expression $$\\hat{E[g(X)]} = \\int_{-\\infty}^{\\infty} f(x|\\hat{\\theta}) dx,$$ \\(f(x|\\hat{\\theta})\\) probability density function using estimated parameters.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/expected_value.maxlogL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected value of a given function for maxlogLreg models. — expected_value.maxlogL","text":"","code":"expected_value.maxlogL(object, g = identity, routine, ...)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/expected_value.maxlogL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected value of a given function for maxlogLreg models. — expected_value.maxlogL","text":"object object maxlogL class obtained fitting model maxlogLreg. g given function \\(g(x)\\). routine character specifying integration routine. integrate gauss_quad available continuous distributions, summate discrete ones. Custom routines can defined must compatible integration API. ... arguments integration routine.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/expected_value.maxlogL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected value of a given function for maxlogLreg models. — expected_value.maxlogL","text":"expected value fitted model corresponding distribution specified y_dist argument maxlogLreg.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/expected_value.maxlogL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Expected value of a given function for maxlogLreg models. — expected_value.maxlogL","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/expected_value.maxlogL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected value of a given function for maxlogLreg models. — expected_value.maxlogL","text":"","code":"library(EstimationTools)  #---------------------------------------------------------------------------- # Example 1: mean value of a estimated model. n <- 100 x <- runif(n = n, -5, 6) y <- rnorm(n = n, mean = -2 + 3 * x, sd = 0.3) norm_data <- data.frame(y = y, x = x)  formulas <- list(sd.fo = ~ 1, mean.fo = ~ x) support <- list(interval = c(-Inf, Inf), type = \"continuous\")  norm_mod_maxlogL <- maxlogLreg(   formulas, y_dist = y ~ dnorm,   support = support,   data = norm_data,   link = list(over = \"sd\", fun = \"log_link\") )  # Actual y values y <- norm_mod_maxlogL$outputs$response  # Expected value Ey <- expected_value.maxlogL(   object = norm_mod_maxlogL,   routine = \"monte-carlo\" )  # Compare plot(y, Ey)    #----------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/gauss_quad.html","id":null,"dir":"Reference","previous_headings":"","what":"Numerical integration through Gaussian Quadrature — gauss_quad","title":"Numerical integration through Gaussian Quadrature — gauss_quad","text":"family functions use quadratures solving integrals. user can create custom integration routine, see details information.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/gauss_quad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numerical integration through Gaussian Quadrature — gauss_quad","text":"","code":"gauss_quad(   fun,   lower,   upper,   kind = \"legendre\",   n = 10,   normalized = FALSE,   ... )"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/gauss_quad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numerical integration through Gaussian Quadrature — gauss_quad","text":"fun R function take numeric argument x possibly parameters. function returns numerical vector value given argument x. lower numeric value lower limit integral. upper numeric value upper limit integral. kind character specifying weight (polynomial) function quadrature. n integer highest order polynomial selected rule. normalized logical. TRUE, rules orthonormal polynomials, otherwise orthogonal polynomials. ... additional arguments passed fun quadrature routine specified argument kind.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/gauss_quad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Numerical integration through Gaussian Quadrature — gauss_quad","text":"value integral function specified fun argument.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/gauss_quad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Numerical integration through Gaussian Quadrature — gauss_quad","text":"gauss_quad uses implementation Gaussian quadratures gaussquad package.wrapper implements rules integration routine place.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/gauss_quad.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Numerical integration through Gaussian Quadrature — gauss_quad","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/gauss_quad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Numerical integration through Gaussian Quadrature — gauss_quad","text":"","code":"library(EstimationTools)  #---------------------------------------------------------------------------- # Example 1: Mean of X ~ N(2,1) (Gauss-Hermitie quadrature). g <- function(x, mu, sigma) sqrt(2)*sigma*x + mu i2 <- gauss_quad(g, lower = -Inf, upper = Inf, kind = 'hermite.h',                  normalized = FALSE, mu = 2, sigma = 1) i2 <- i2/sqrt(pi) i2 #> [1] 2   #----------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/half_norm_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Half normal key function — half_norm_key","title":"Half normal key function — half_norm_key","text":"function provides half normal key function model fitting distance sampling.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/half_norm_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Half normal key function — half_norm_key","text":"","code":"half_norm_key(x, sigma)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/half_norm_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Half normal key function — half_norm_key","text":"x vector perpendicular distances transect. sigma scale parameter.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/half_norm_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Half normal key function — half_norm_key","text":"numeric value corresponding given value x sigma.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/half_norm_key.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Half normal key function — half_norm_key","text":"half normal key function parameter sigma. expression given \\(g(x) = \\exp(\\frac{-x^2}{2*\\sigma^2},\\) x > 0.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/half_norm_key.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Half normal key function — half_norm_key","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/half_norm_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Half normal key function — half_norm_key","text":"","code":"library(EstimationTools)  #---------------------------------------------------------------------------- # Example: Half normal function half_norm_key(x=1, sigma=4.1058) #> [1] 0.9707753 curve(half_norm_key(x, sigma=4.1058), from=0, to=20, ylab='g(x)')   #----------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/hazard_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Hazard functions for any distribution — hazard_fun","title":"Hazard functions for any distribution — hazard_fun","text":"function takes name probability density/mass function argument creates hazard function.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/hazard_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hazard functions for any distribution — hazard_fun","text":"","code":"hazard_fun(distr, log = FALSE)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/hazard_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hazard functions for any distribution — hazard_fun","text":"distr length-one character vector name density/mass function interest. log logical; TRUE, natural logarithm hazard values returned.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/hazard_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hazard functions for any distribution — hazard_fun","text":"function folling input arguments: x vector (non-negative) quantiles. ... Arguments probability density/mass function.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/hazard_fun.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hazard functions for any distribution — hazard_fun","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/hazard_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hazard functions for any distribution — hazard_fun","text":"","code":"library(EstimationTools)  #---------------------------------------------------------------------------- # Example 1: Hazard function of the Weibull distribution.  # Hazard function in the 'maxlogL' framework hweibull1 <- hazard_fun('dweibull')  # Hazard function from scratch hweibull2 <- function(x, shape, scale){   shape/scale * (x/scale)^(shape - 1) }  # Comparison hweibull1(0.2, shape = 2, scale = 1) #> [1] 0.4 hweibull2(0.2, shape = 2, scale = 1) #> [1] 0.4   #----------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/hazard_rate_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Hazard rate key function — hazard_rate_key","title":"Hazard rate key function — hazard_rate_key","text":"function provides hazard rate key function model fitting distance sampling.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/hazard_rate_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hazard rate key function — hazard_rate_key","text":"","code":"hazard_rate_key(x, sigma, beta)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/hazard_rate_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hazard rate key function — hazard_rate_key","text":"x vector perpendicular distances transect. sigma scale parameter. beta shape parameter.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/hazard_rate_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hazard rate key function — hazard_rate_key","text":"numeric value corresponding given value x, sigma beta.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/hazard_rate_key.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hazard rate key function — hazard_rate_key","text":"hazard rate key function parameters sigma beta. expression given \\(g(x) = 1 - \\exp((\\frac{-x}{\\sigma})^{-\\beta},\\) x > 0.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/hazard_rate_key.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hazard rate key function — hazard_rate_key","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/hazard_rate_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hazard rate key function — hazard_rate_key","text":"","code":"library(EstimationTools)  #---------------------------------------------------------------------------- # Example: Hazard rate function hazard_rate_key(x=1, sigma=2, beta=3) #> [1] 0.9996645 curve(hazard_rate_key(x, sigma=2, beta=3), from=0, to=10, ylab='g(x)')   #----------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/integration.html","id":null,"dir":"Reference","previous_headings":"","what":"Integration — integration","title":"Integration — integration","text":"wrapper routine integration maxlogL framework. used integration compute detectability density functions computation mean values, also general purpose integrator.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/integration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integration — integration","text":"","code":"integration(fun, lower, upper, routine = \"integrate\", ...)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/integration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integration — integration","text":"fun R function take numeric argument x possibly parameters. function returns numerical vector value given argument x. lower numeric value lower limit integral. upper numeric value upper limit integral. routine character specifying integration routine. integrate gauss_quad available, custom routines can defined. ... additional arguments passed fun integration routine specified routine argument.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/integration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integration — integration","text":"user can create custom integration routines implementation wrapper function using three arguments fun: function take numeric argument x possibly parameters. lower: numeric value lower limit integral. upper: numeric value upper limit integral. ...> furthermore, user must define additional arguments passed fun function. output must numeric atomic value result integral.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/integration.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Integration — integration","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/integration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integration — integration","text":"","code":"library(EstimationTools)   #---------------------------------------------------------------------------- # Example 1: Mean of X ~ N(2,1) using 'integrate'. mynorm <- function(x, mu, sigma) x*dnorm(x, mean = mu, sd = sigma) i1 <- integration(mynorm, lower = -Inf, upper = Inf, mu = 2, sigma = 1) i1 #> [1] 2  #---------------------------------------------------------------------------- # Example 2: Mean of X ~ N(2,1) using 'gauss_quad' (Gauss-Hermitie #            quadrature). g <- function(x, mu, sigma) sqrt(2)*sigma*x + mu i2 <- integration(g, lower = -Inf, upper = Inf, routine = 'gauss_quad',                   kind = 'hermite.h', normalized = FALSE,                   mu = 2, sigma = 1) i2 <- i2/sqrt(pi) i2 #> [1] 2   #---------------------------------------------------------------------------- # Example 3: replicating integrate i3 <- integrate(dnorm, lower=-1.96, upper=1.96) i4 <- integration(dnorm, lower=-1.96, upper=1.96) identical(i3$value, i4) #> [1] TRUE  #----------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/internalfunc.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal functions for formula and data handle — formula2Surv","title":"Internal functions for formula and data handle — formula2Surv","text":"Utility functions useful passing data functions inside others.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/internalfunc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal functions for formula and data handle — formula2Surv","text":"","code":"formula2Surv(model_frame)  fo_and_data(y, fo, model_frame, data, fo2Surv = TRUE)  extract_fun_args(fun, exclude, ...)  saturated_maxlogL(object, silent = TRUE)  null_maxlogL(object, silent = TRUE)  identity(x)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/internalfunc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal functions for formula and data handle — formula2Surv","text":"model_frame model frame build internally functions EstimationTools package","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/internalfunc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal functions for formula and data handle — formula2Surv","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/interp.options.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure various aspects of interpolating function in TTT_hazard_shape — interp.options","title":"Configure various aspects of interpolating function in TTT_hazard_shape — interp.options","text":"function allows user set parameters following interpolating functions can used inside TTT_hazard_shape.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/interp.options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure various aspects of interpolating function in TTT_hazard_shape — interp.options","text":"","code":"interp.options(interp.fun = \"splinefun\", length.out = 10, ...)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/interp.options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure various aspects of interpolating function in TTT_hazard_shape — interp.options","text":"interp.fun character. argument defines interpolating function used. Default value \"splinefun\". Visit Details section information. length.numeric. Number points interpolated. Default value 10. ... arguments passed interpolating function.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/interp.options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Configure various aspects of interpolating function in TTT_hazard_shape — interp.options","text":"interpolating function particular arguments. following interpolating functions  recommended: approxfun splinefun spline user can also implement custom interpolating function.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/interp.options.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Configure various aspects of interpolating function in TTT_hazard_shape — interp.options","text":"Jaime Mosquera Gutiérrez jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/is.maxlogL.html","id":null,"dir":"Reference","previous_headings":"","what":"Is return of any object of EstimationTools? — is.maxlogL","title":"Is return of any object of EstimationTools? — is.maxlogL","text":"Checks object classes implemented EstimationTools package.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/is.maxlogL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is return of any object of EstimationTools? — is.maxlogL","text":"","code":"is.maxlogL(x)  is.EmpiricalTTT(x)  is.HazardShape(x)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/is.maxlogL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is return of any object of EstimationTools? — is.maxlogL","text":"x object EstimationTools.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/is.maxlogL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Is return of any object of EstimationTools? — is.maxlogL","text":"Jaime Mosquera Gutiérrez jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/legend.HazardShape.html","id":null,"dir":"Reference","previous_headings":"","what":"Customize legend for plot.HazardShape outputs — legend.HazardShape","title":"Customize legend for plot.HazardShape outputs — legend.HazardShape","text":"Put legend run plot.HazardShape function.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/legend.HazardShape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customize legend for plot.HazardShape outputs — legend.HazardShape","text":"","code":"legend.HazardShape(   x,   y = NULL,   legend = c(\"Empirical TTT\", \"Spline curve\"),   fill = NULL,   col = 1,   border = \"white\",   lty = NA,   lwd = NA,   pch = c(1, NA),   angle = 45,   density = NULL,   bty = \"o\",   bg = par(\"bg\"),   box.lwd = par(\"lwd\"),   box.lty = par(\"lty\"),   box.col = par(\"fg\"),   pt.bg = NA,   cex = 1,   pt.cex = cex,   pt.lwd = lwd,   xjust = 0,   yjust = 1,   x.intersp = 1,   y.intersp = 1,   adj = c(0, 0.5),   text.width = NULL,   text.col = par(\"col\"),   text.font = NULL,   merge = TRUE,   trace = FALSE,   plot = TRUE,   ncol = 1,   horiz = FALSE,   title = NULL,   inset = 0,   xpd = TRUE,   title.col = text.col[1],   title.adj = 0.5,   title.cex = cex[1],   title.font = text.font[1],   seg.len = 2,   curve_options = list(col = 2, lwd = 2, lty = 1) )"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/legend.HazardShape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customize legend for plot.HazardShape outputs — legend.HazardShape","text":"x, y x y co-ordinates used position legend.     can specified keyword way accepted     xy.coords: See ‘Details’. legend character expression vector     length \\(\\ge 1\\) appear legend.      objects coerced .graphicsAnnot. fill specified, argument cause boxes filled     specified colors (shaded specified colors)     appear beside legend text. col color points lines appearing legend. border border color boxes (used     fill specified). lty, lwd line types widths lines appearing     legend.  One two must specified line drawing. pch plotting symbols appearing legend,     numeric vector vector 1-character strings (see     points). Unlike points, can     specified single multi-character string.  Must     specified symbol drawing. angle angle shading lines. density density shading lines, numeric     positive. NULL negative NA color filling     assumed. bty type box drawn around legend.  allowed     values \"o\" (default) \"n\". bg background color legend box.  (Note     used bty != \"n\".) box.lty, box.lwd, box.col line type, width color     legend box (bty = \"o\"). pt.bg background color points,     corresponding argument bg. cex character expansion factor relative current     par(\"cex\").  Used text, provides default     pt.cex. pt.cex expansion factor(s) points. pt.lwd line width points, defaults one     lines, set, par(\"lwd\"). xjust legend justified relative legend     x location.  value 0 means left justified, 0.5 means centered     1 means right justified. yjust xjust legend y location. x.intersp character interspacing factor horizontal (x) spacing     symbol legend text. y.intersp vertical (y) distances (lines text shared /legend entry).     vector one element row legend can used. adj numeric length 1 2; string adjustment legend     text.  Useful y-adjustment labels     plotmath expressions. text.width width legend text x (\"user\")     coordinates.  (positive even reversed x axis.)     Can single positive numeric value (width column legend),     vector (one element column legend),     NULL (default) computing proper maximum value strwidth(legend)),     NA computing proper column wise maximum value strwidth(legend)). text.col color used legend text. text.font font used legend text, see text. merge logical; TRUE, merge points lines     filled boxes.  Defaults TRUE points lines. trace logical; TRUE, shows legend     magical computations. plot logical.  FALSE, nothing plotted     sizes returned. ncol number columns set legend items     (default 1, vertical legend). horiz logical; TRUE, set legend horizontally     rather vertically (specifying horiz overrides ncol     specification). title character string length-one expression giving     title placed top legend.  objects     coerced .graphicsAnnot. inset inset distance(s) margins fraction     plot region legend placed keyword. xpd supplied, value graphical parameter xpd     used legend drawn. title.col color title, defaults text.col[1]. title.adj horizontal adjustment title: see help     par(\"adj\"). title.cex expansion factor(s) title, defaults cex[1]. title.font font used legend title, defaults text.font[1],     see text. seg.len length lines drawn illustrate lty     /lwd (units character widths). curve_options list whose names curve graphical parameters, whose values corresponding graphical parameters values.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/legend.HazardShape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Customize legend for plot.HazardShape outputs — legend.HazardShape","text":"function wrapper legend function. just adds two features: legend default value, regarding HazardShape objects produces TTT plot LOESS estimation. curve_options used set legend parameters LOESS curve. encourage define first list curve parameters, pass plot.HazardShape legend.HazardShape (see example 2).","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/legend.HazardShape.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Customize legend for plot.HazardShape outputs — legend.HazardShape","text":"Jaime Mosquera Gutiérrez jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/legend.HazardShape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Customize legend for plot.HazardShape outputs — legend.HazardShape","text":"","code":"library(EstimationTools)  data(\"reduction_cells\") TTT_IG <- TTTE_Analytical(Surv(days, status) ~ 1, data = reduction_cells,                           method = 'censored') HS_IG <- TTT_hazard_shape(TTT_IG, data = reduction_cells)  #---------------------------------------------------------------------------- # Example 1: put legend to the TTT plot of the reduction cells data set.  # Run `plot.HazardShape` method. par(   cex.lab=1.8,   cex.axis=1.8,   mar=c(4.8,5.4,1,1),   las = 1,   mgp=c(3.4,1,0) ) plot(HS_IG, pch = 16, cex = 1.8)  # Finally, put the legend legend.HazardShape(   x = \"bottomright\",   box.lwd = NA,   cex = 1.8,   pt.cex = 1.8,   bty = 'n',   pch = c(16, NA) )  #---------------------------------------------------------------------------- # Example 2: example 1 with custom options for the curve  # This is the list with curve parameters loess_options <- list(   col = 3, lwd = 4, lty = 2 ) par(   cex.lab=1.8,   cex.axis=1.8,   mar=c(4.8,5.4,1,1),   las = 1,   mgp=c(3.4,1,0) )  plot(HS_IG, pch = 16, cex = 1.8, curve_options = loess_options) legend.HazardShape(   x = \"bottomright\",   box.lwd = NA,   cex = 1.8,   pt.cex = 1.8,   bty = 'n',   pch = c(16, NA),   curve_options = loess_options )"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/loess.options.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure various aspects of LOESS in TTT_hazard_shape — loess.options","title":"Configure various aspects of LOESS in TTT_hazard_shape — loess.options","text":"function allows user set parameters loess function used inside TTT_hazard_shape.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/loess.options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure various aspects of LOESS in TTT_hazard_shape — loess.options","text":"","code":"loess.options(span = 2/3, ...)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/loess.options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure various aspects of LOESS in TTT_hazard_shape — loess.options","text":"span parameter controls degree smoothing. ... arguments passed loess function.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/loess.options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Configure various aspects of LOESS in TTT_hazard_shape — loess.options","text":"Please, visit loess know possible arguments. following arguments available passing LOESS estimation: dataThe data handled inside TTT_hazard_shape computed empirical TTT. subsetThis argument used loess take subset data. context, necessary.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/loess.options.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Configure various aspects of LOESS in TTT_hazard_shape — loess.options","text":"Jaime Mosquera Gutiérrez jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/log_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Logarithmic link function (for estimation with maxlogL object) — log_link","title":"Logarithmic link function (for estimation with maxlogL object) — log_link","text":"log_link object provides way implement logarithmic link function maxlogL needs perform estimation. See documentation maxlogL information parameter estimation implementation link objects.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/log_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logarithmic link function (for estimation with maxlogL object) — log_link","text":"","code":"log_link()"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/log_link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logarithmic link function (for estimation with maxlogL object) — log_link","text":"list logit link function, inverse name.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/log_link.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Logarithmic link function (for estimation with maxlogL object) — log_link","text":"log_link part family generic functions input arguments defines returns list details link function: name: character string name link function. g: implementation link function generic function R. g_inv: implementation inverse link function generic function R. way add new mapping functions. user must specify details aforesaid.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/log_link.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logarithmic link function (for estimation with maxlogL object) — log_link","text":"","code":"# One parameters of normal distribution mapped with logarithmic function x <- rnorm(n = 10000, mean = 50, sd = 4) theta_2 <- maxlogL( x = x, link = list(over = \"sd\",                                        fun = \"log_link\") ) summary(theta_2) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>        AIC      BIC #>   56225.33 56239.76 #> _______________________________________________________________ #>      Estimate  Std. Error Z value Pr(>|z|)     #> mean  49.95957    0.04023  1241.7   <2e-16 *** #> sd     4.02340    0.02845   141.4   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---  # Link function name fun <- log_link()$name print(fun) #> [1] \"log\"  # Link function g <- log_link()$g curve(g(x), from = 0, to = 1)   # Inverse link function ginv <- log_link()$g_inv curve(ginv(x), from = -5, to = 5)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/logit_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Logit link function (for estimation with maxlogL object) — logit_link","title":"Logit link function (for estimation with maxlogL object) — logit_link","text":"log_link object provides way implement logit link function maxlogL needs perform estimation. See documentation maxlogL information parameter estimation implementation link objects.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/logit_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logit link function (for estimation with maxlogL object) — logit_link","text":"","code":"logit_link()"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/logit_link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logit link function (for estimation with maxlogL object) — logit_link","text":"list logit link function, inverse name.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/logit_link.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Logit link function (for estimation with maxlogL object) — logit_link","text":"logit_link part family generic functions input arguments defines returns list details link function: name: character string name link function. g: implementation link function generic function R. g_inv: implementation inverse link function generic function R. way add new mapping functions. user must specify details aforesaid.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/logit_link.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Logit link function (for estimation with maxlogL object) — logit_link","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/logit_link.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logit link function (for estimation with maxlogL object) — logit_link","text":"","code":"#-------------------------------------------------------------------------------- # Estimation of proportion in binomial distribution with 'logit' function # 10 trials, probability of success equals to 30%) N <- rbinom(n = 100, size = 10, prob = 0.3) phat <- maxlogL(x = N, dist = 'dbinom', fixed = list(size=10),                 link = list(over = \"prob\", fun = \"logit_link\")) summary(phat) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>        AIC      BIC #>   357.5029 357.5029 #> _______________________________________________________________ #>      Estimate  Std. Error Z value Pr(>|z|)     #> prob   0.33800    0.01496    22.6   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---  # Link function name fun <- logit_link()$name print(fun) #> [1] \"logit\"  # Link function g <- logit_link()$g curve(g(x), from = 0, to = 1)   # Inverse link function ginv <- logit_link()$g_inv curve(ginv(x), from = -10, to = 10)   #--------------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogL.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum Likelihood Estimation for parametric distributions — maxlogL","title":"Maximum Likelihood Estimation for parametric distributions — maxlogL","text":"Wrapper function compute maximum likelihood estimators (MLE) distribution implemented R.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum Likelihood Estimation for parametric distributions — maxlogL","text":"","code":"maxlogL(   x,   dist = \"dnorm\",   fixed = NULL,   link = NULL,   start = NULL,   lower = NULL,   upper = NULL,   optimizer = \"nlminb\",   control = NULL,   StdE_method = c(\"optim\", \"numDeriv\"),   silent = FALSE,   ... )"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum Likelihood Estimation for parametric distributions — maxlogL","text":"x vector data fitted. argument must matrix hierarchical distributions. dist length-one character vector name density/mass function interest. default value 'dnorm', compute maximum likelihood estimators normal distribution. fixed list fixed/known parameters distribution interest. Fixed parameters must passed name. link list names parameters linked, names link function object. names parameters, please visit documentation density/mass function. three link functions available: log_link, logit_link NegInv_link. start numeric vector initial values parameters estimated. lower numeric vector lower bounds, length argument start (box-constrained optimization). upper numeric vector upper bounds, length argument start (box-constrained optimization). optimizer length-one character vector name optimization routine. nlminb, optim, DEoptim gaare available; custom optimization routines can also implemented. nlminb default routine. control control parameters optimization routine. Please, visit documentation selected optimizer information. StdE_method length-one character vector routine Hessian matrix computation. needed standard error estimation. options available \"optim\" \"numDeriv\". information, visit optim hessian. silent logical. TRUE, warnings maxlogL suppressed. ... arguments supplied optimizer.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum Likelihood Estimation for parametric distributions — maxlogL","text":"list class \"maxlogL\" containing following lists: fit list output information estimation. inputs list input arguments. outputs list output additional information: Number parameters. Sample size Standard error computation method.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maximum Likelihood Estimation for parametric distributions — maxlogL","text":"maxlogL computes likelihood function corresponding distribution specified argument dist maximizes optim, nlminb DEoptim. maxlogL generates S3 object class maxlogL. Noncentrality parameters must named ncp distribution.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogL.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Maximum Likelihood Estimation for parametric distributions — maxlogL","text":"following generic functions can used maxlogL object: summary, print, AIC, BIC, logLik.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogL.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Maximum Likelihood Estimation for parametric distributions — maxlogL","text":"Nelder JA, Mead R (1965). “Simplex Method Function Minimization.” Computer Journal, 7(4), 308--313. ISSN 0010-4620, doi:10.1093/comjnl/7.4.308 , https://academic.oup.com/comjnl/article-lookup/doi/10.1093/comjnl/7.4.308. Fox PA, Hall AP, Schryer NL (1978). “PORT Mathematical Subroutine Library.” ACM Transactions Mathematical Software, 4(2), 104--126. ISSN 00983500, doi:10.1145/355780.355783 , https://dl.acm.org/doi/10.1145/355780.355783. Nash JC (1979). Compact Numerical Methods Computers. Linear Algebra Function Minimisation, 2nd Edition edition. Adam Hilger, Bristol. Dennis JE, Gay DM, Walsh RE (1981). “Adaptive Nonlinear Least-Squares Algorithm.” ACM Transactions Mathematical Software, 7(3), 348--368. ISSN 00983500, doi:10.1145/355958.355965 , https://dl.acm.org/doi/10.1145/355958.355965.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Maximum Likelihood Estimation for parametric distributions — maxlogL","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum Likelihood Estimation for parametric distributions — maxlogL","text":"","code":"library(EstimationTools)  #---------------------------------------------------------------------------- # Example 1: estimation with one fixed parameter x <- rnorm(n = 10000, mean = 160, sd = 6) theta_1 <- maxlogL(x = x, dist = 'dnorm', control = list(trace = 1),                  link = list(over = \"sd\", fun = \"log_link\"),                  fixed = list(mean = 160)) #>   0:     44203.254:  1.00000 #>   1:     32574.644:  2.00000 #>   2:     32373.279:  1.92537 #>   3:     32246.383:  1.77870 #>   4:     32239.454:  1.80826 #>   5:     32239.348:  1.80508 #>   6:     32239.348:  1.80500 #>   7:     32239.348:  1.80500 summary(theta_1) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>       AIC     BIC #>   64478.7 64478.7 #> _______________________________________________________________ #>    Estimate  Std. Error Z value Pr(>|z|)     #> sd   6.07995    0.04299   141.4   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---   #---------------------------------------------------------------------------- # Example 2: both parameters of normal distribution mapped with logarithmic # function theta_2 <- maxlogL(x = x, dist = \"dnorm\",                    link = list(over = c(\"mean\",\"sd\"),                                fun = c(\"log_link\",\"log_link\"))) summary(theta_2) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>        AIC      BIC #>   64482.36 64496.78 #> _______________________________________________________________ #>      Estimate  Std. Error Z value Pr(>|z|)     #> mean 160.03533    0.06080  2632.2   <2e-16 *** #> sd     6.07985    0.04299   141.4   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---   #-------------------------------------------------------------------------------- # Example 3: parameter estimation in ZIP distribution if (!require('gamlss.dist')) install.packages('gamlss.dist') #> Loading required package: gamlss.dist #> Loading required package: MASS library(gamlss.dist) z <- rZIP(n=1000, mu=6, sigma=0.08) theta_3  <- maxlogL(x = z, dist = 'dZIP', start = c(0, 0),                    lower = c(-Inf, -Inf), upper = c(Inf, Inf),                    optimizer = 'optim',                    link = list(over=c(\"mu\", \"sigma\"),                    fun = c(\"log_link\", \"logit_link\"))) summary(theta_3) #> _______________________________________________________________ #> Optimization routine: optim  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>        AIC      BIC #>   4836.142 4845.957 #> _______________________________________________________________ #>       Estimate  Std. Error Z value Pr(>|z|)     #> mu     6.095755   0.081604  74.699   <2e-16 *** #> sigma  0.071913   0.008297   8.667   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---   #-------------------------------------------------------------------------------- # Example 4: parameter estimation with fixed noncentrality parameter. y_2 <- rbeta(n = 1000, shape1 = 2, shape2 = 3) theta_41 <- maxlogL(x = y_2, dist = \"dbeta\",                     link = list(over = c(\"shape1\", \"shape2\"),                     fun = c(\"log_link\",\"log_link\"))) summary(theta_41) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>         AIC       BIC #>   -475.7326 -470.8248 #> _______________________________________________________________ #>        Estimate  Std. Error Z value Pr(>|z|)     #> shape1   1.90217    0.07967   23.88   <2e-16 *** #> shape2   3.00943    0.13210   22.78   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---  # It is also possible define 'ncp' as fixed parameter theta_42 <- maxlogL(x = y_2, dist = \"dbeta\", fixed = list(ncp = 0),                     link = list(over = c(\"shape1\", \"shape2\"),                     fun = c(\"log_link\",\"log_link\")) ) summary(theta_42) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>         AIC       BIC #>   -475.7326 -470.8248 #> _______________________________________________________________ #>        Estimate  Std. Error Z value Pr(>|z|)     #> shape1   1.90217    0.07967   23.88   <2e-16 *** #> shape2   3.00943    0.13210   22.78   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---   #--------------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogLreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum Likelihood Estimation for parametric linear regression models — maxlogLreg","title":"Maximum Likelihood Estimation for parametric linear regression models — maxlogLreg","text":"Function compute maximum likelihood estimators (MLE) regression parameters distribution implemented R covariates (linear predictors).","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogLreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum Likelihood Estimation for parametric linear regression models — maxlogLreg","text":"","code":"maxlogLreg(   formulas,   y_dist,   support = NULL,   data = NULL,   subset = NULL,   fixed = NULL,   link = NULL,   start = NULL,   lower = NULL,   upper = NULL,   optimizer = \"nlminb\",   control = NULL,   silent = FALSE,   StdE_method = c(\"optim\", \"numDeriv\"),   ... )"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogLreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum Likelihood Estimation for parametric linear regression models — maxlogLreg","text":"formulas list formula objects. element must ~, terms right separated + operators. response variable left side optional. Linear predictor parameter must specified name parameter followed suffix '.fo'. See examples illustration. y_dist formula object specifies distribution response variable. left side ~ must response, right side must name o de probability density/mass function. See section Details examples illustration. support list following entries: interval: two dimensional atomic vector indicating set possible values random variable distribution specified y_dist. type: character indicating distribution discrete continous random variable. data optional data frame containing variables model. data specified, variables taken environment maxlogLreg called. subset optional vector specifying subset observations used fitting process. fixed list fixed/known parameters distribution interest. Fixed parameters must passed name value (known). link list names parameters linked, names link function object. names parameters, please visit documentation density/mass function. three link functions available: log_link, logit_link NegInv_link. Take account: order used argument corresponds order argument link. start numeric vector initial values parameters estimated. Zero default value. lower numeric vector lower bounds, lenght argument start (box-constrained optimization). -Inf default value. upper numeric vector upper bounds, lenght argument start (box-constrained optimization). Inf default value. optimizer length-one character vector name optimization routine.  nlminb, optim DEoptim available; nlminb default routine. control control parameters optimization routine. Please, visit documentation selected optimizer information. silent logical. TRUE, warnings maxlogL suppressed. StdE_method length-one character vector routine Hessian matrix computation. needed standard error estimation. options available \"optim\" \"numDeriv\". information, visit optim hessian. ... arguments supplied optimization routine.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogLreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum Likelihood Estimation for parametric linear regression models — maxlogLreg","text":"list class maxlogL containing following lists: fit list output information estimation method used. inputs list input arguments. outputs list additional information. important outputs : npar: number parameters. n: sample size Stde_method: standard error computation method. b_lenght: list number regression parameters. design_matrix: list \\(\\mathbf{X}\\) matrix parameter, response values (called y) censorship matrix (called status). See Details section information.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogLreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maximum Likelihood Estimation for parametric linear regression models — maxlogLreg","text":"maxlogLreg computes programmatically log-likelihood (log L) function corresponding following model: $$   y_i \\stackrel{iid.}{\\sim} \\mathcal{D}(\\theta_{i1},\\theta_{i2},\\dots,   \\theta_{ij}, \\dots, \\theta_{ik}) $$ $$   g(\\boldsymbol{\\theta}_{j}) = \\boldsymbol{\\eta}_{j} = \\mathbf{X}_j^\\top   \\boldsymbol{\\beta}_j, $$ , \\(g_k(\\cdot)\\) \\(k\\)-th link function. \\(\\boldsymbol{\\eta}_{j}\\) value linear predictor $j^th$ observations. \\(\\boldsymbol{\\beta}_j = (\\beta_{0j}, \\beta_{1j},\\dots,         \\beta_{(p_j-1)j})^\\top\\) fixed effects vector, \\(p_j\\) number parameters linear predictor \\(j\\) \\(\\mathbf{X}_j\\) known design matrix order \\(n\\times p_j\\). terms specified formulas argument. \\(\\mathcal{D}\\) distribution specified argument y_dist. , maxlogLreg maximizes log L optim, nlminb DEoptim. maxlogLreg generates S3 object class maxlogL. Estimation censorship can handled Surv objects (see example 2). output object stores corresponding censorship matrix, defined \\(r_{il} = 1\\) sample unit \\(\\) status \\(l\\), \\(r_{il} = 0\\) case. \\(=1,2,\\dots,n\\) \\(l=1,2,3\\) (\\(l=1\\): observation status, \\(l=2\\): right censorship status, \\(l=3\\): left censorship status).","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogLreg.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Maximum Likelihood Estimation for parametric linear regression models — maxlogLreg","text":"following generic functions can used maxlogL object: summary, print, logLik, AIC. Noncentrality parameters must named ncp distribution.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogLreg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Maximum Likelihood Estimation for parametric linear regression models — maxlogLreg","text":"Nelder JA, Mead R (1965). “Simplex Method Function Minimization.” Computer Journal, 7(4), 308--313. ISSN 0010-4620, doi:10.1093/comjnl/7.4.308 , https://academic.oup.com/comjnl/article-lookup/doi/10.1093/comjnl/7.4.308. Fox PA, Hall AP, Schryer NL (1978). “PORT Mathematical Subroutine Library.” ACM Transactions Mathematical Software, 4(2), 104--126. ISSN 00983500, doi:10.1145/355780.355783 , https://dl.acm.org/doi/10.1145/355780.355783. Nash JC (1979). Compact Numerical Methods Computers. Linear Algebra Function Minimisation, 2nd Edition edition. Adam Hilger, Bristol. Dennis JE, Gay DM, Walsh RE (1981). “Adaptive Nonlinear Least-Squares Algorithm.” ACM Transactions Mathematical Software, 7(3), 348--368. ISSN 00983500, doi:10.1145/355958.355965 , https://dl.acm.org/doi/10.1145/355958.355965.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogLreg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Maximum Likelihood Estimation for parametric linear regression models — maxlogLreg","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/maxlogLreg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum Likelihood Estimation for parametric linear regression models — maxlogLreg","text":"","code":"library(EstimationTools)  #-------------------------------------------------------------------------------- # Example 1: Estimation in simulated normal distribution n <- 1000 x <- runif(n = n, -5, 6) y <- rnorm(n = n, mean = -2 + 3 * x, sd = exp(1 + 0.3* x)) norm_data <- data.frame(y = y, x = x)  # It does not matter the order of distribution parameters formulas <- list(sd.fo = ~ x, mean.fo = ~ x) support <- list(interval = c(-Inf, Inf), type = 'continuous')  norm_mod <- maxlogLreg(formulas, y_dist = y ~ dnorm, support = support,                        data = norm_data,                        link = list(over = \"sd\", fun = \"log_link\")) summary(norm_mod) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>        AIC      BIC #>   5018.613 5038.244 #> _______________________________________________________________ #> Fixed effects for mean #> --------------------------------------------------------------- #>              Estimate Std. Error Z value  Pr(>|z|)     #> (Intercept) -2.035660   0.110082 -18.492 < 2.2e-16 *** #> x            2.997588   0.029471 101.712 < 2.2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Fixed effects for log(sd)  #> --------------------------------------------------------------- #>             Estimate Std. Error Z value  Pr(>|z|)     #> (Intercept) 0.967555   0.022528  42.948 < 2.2e-16 *** #> x           0.288802   0.006672  43.286 < 2.2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---   #-------------------------------------------------------------------------------- # Example 2: Fitting with censorship # (data from https://www.itl.nist.gov/div898/handbook/apr/section4/apr413.htm)  failures <- c(55, 187, 216, 240, 244, 335, 361, 373, 375, 386) fails <- c(failures, rep(500, 10)) status <- c(rep(1, length(failures)), rep(0, 10)) Wei_data <- data.frame(fails = fails, status = status)  # Formulas with linear predictors formulas <- list(scale.fo=~1, shape.fo=~1) support <- list(interval = c(0, Inf), type = 'continuous')  # Bounds for optimization. Upper bound set with default values (Inf) start <- list(   scale = list(Intercept = 100),   shape = list(Intercept = 10) ) lower <- list(   scale = list(Intercept = 0),   shape = list(Intercept = 0) )  mod_weibull <- maxlogLreg(formulas, y_dist = Surv(fails, status) ~ dweibull,                           support = c(0, Inf), start = start,                           lower = lower, data = Wei_data) summary(mod_weibull) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>        AIC      BIC #>   154.2437 156.2352 #> _______________________________________________________________ #> Fixed effects for shape #> --------------------------------------------------------------- #>             Estimate Std. Error Z value  Pr(>|z|)     #> (Intercept)  1.72563    0.50341  3.4279 0.0006083 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Fixed effects for scale #> --------------------------------------------------------------- #>             Estimate Std. Error Z value  Pr(>|z|)     #> (Intercept)   606.00     124.43  4.8701 1.115e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---   #--------------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.EmpiricalTTT.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for EmpiricalTTT objects — plot.EmpiricalTTT","title":"Plot method for EmpiricalTTT objects — plot.EmpiricalTTT","text":"Draws TTT plot EmpiricalTTT object, one strata. TTT plots graphed order appear list element strata list element phi_n EmpiricalTTT object.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.EmpiricalTTT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for EmpiricalTTT objects — plot.EmpiricalTTT","text":"","code":"# S3 method for EmpiricalTTT plot(   x,   add = FALSE,   grid = FALSE,   type = \"l\",   pch = 1,   xlab = \"i/n\",   ylab = expression(phi[n](i/n)),   ... )"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.EmpiricalTTT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for EmpiricalTTT objects — plot.EmpiricalTTT","text":"x object class EmpiricalTTT. add logical. TRUE, plot.EmpiricalTTT add TTT plot already existing plot. grid logical. TRUE, plot appears grid. type character string (length 1 vector) vector 1-character strings indicating type plot TTT graph. See plot. pch numeric (integer). vector plotting characters symbols type = \"p\". See points. xlab, ylab titles x y axes, plot. ... arguments passed matplot. See examples Details section information.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.EmpiricalTTT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot method for EmpiricalTTT objects — plot.EmpiricalTTT","text":"method based matplot. function sets default values graphic parameters: type = \"l\", pch = 1, xlab = \"/n\" ylab = expression(phi[n](/n)). arguments can modified user.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.EmpiricalTTT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot method for EmpiricalTTT objects — plot.EmpiricalTTT","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.EmpiricalTTT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for EmpiricalTTT objects — plot.EmpiricalTTT","text":"","code":"library(EstimationTools)  #-------------------------------------------------------------------------------- # First example: Scaled empirical TTT from 'mgus1' data from 'survival' package.  TTT_1 <- TTTE_Analytical(Surv(stop, event == 'pcm') ~1, method = 'cens',                          data = mgus1, subset=(start == 0)) plot(TTT_1, type = \"p\")    #-------------------------------------------------------------------------------- # Second example: Scaled empirical TTT using a factor variable with 'aml' data # from 'survival' package.  TTT_2 <- TTTE_Analytical(Surv(time, status) ~ x, method = \"cens\", data = aml) plot(TTT_2, type = \"l\", lty = c(1,1), col = c(2,4)) plot(TTT_2, add = TRUE, type = \"p\", lty = c(1,1), col = c(2,4), pch = 16)   #-------------------------------------------------------------------------------- # Third example: Non-scaled empirical TTT without a factor (arbitrarily simulated # data).  y <- rweibull(n=20, shape=1, scale=pi) TTT_3 <- TTTE_Analytical(y ~ 1, scaled = FALSE) plot(TTT_3, type = \"s\", col = 3, lwd = 3)    #-------------------------------------------------------------------------------- # Fourth example: TTT plot for 'carbone' data from 'AdequacyModel' package  if (!require('AdequacyModel')) install.packages('AdequacyModel') #> Loading required package: AdequacyModel library(AdequacyModel) data(carbone) TTT_4 <- TTTE_Analytical(response = carbone, scaled = TRUE) plot(TTT_4, type = \"l\", col = \"red\", lwd = 2, grid = TRUE)    #--------------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.HazardShape.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of HazardShape objects — plot.HazardShape","title":"Plot of HazardShape objects — plot.HazardShape","text":"Draws empirical total time test (TTT) plot non-parametric (LOESS) estimated curve useful identifying hazard shape.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.HazardShape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of HazardShape objects — plot.HazardShape","text":"","code":"# S3 method for HazardShape plot(   x,   xlab = \"i/n\",   ylab = expression(phi[n](i/n)),   xlim = c(0, 1),   ylim = c(0, 1),   col = 1,   lty = NULL,   lwd = NA,   main = \"\",   curve_options = list(col = 2, lwd = 2, lty = 1),   par_plot = lifecycle::deprecated(),   legend_options = lifecycle::deprecated(),   ... )"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.HazardShape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of HazardShape objects — plot.HazardShape","text":"x object class initValOW, generated TTT_hazard_shape. xlab, ylab titles x y axes, plot. xlim x limits (x1, x2) plot. ylim y limits (x1, x2) plot. col colors lines points. Multiple colors can specified. usual color argument plot.default. lty vector line types, see par information. lwd vector line widths, see par information. main main title plot. curve_options list arguments useful customization non-parametric estimate plot. par_plot (deprecated) graphical parameters can passed plot. See Details section information. legend_options (deprecated) list fur arguments useful customization. See Details section information. legend plot. ... arguments passed empirical TTT plot.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.HazardShape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot of HazardShape objects — plot.HazardShape","text":"plot complements use TTT_hazard_shape. always advisable use function order check result non-parametric estimate TTT plot. See first example Examples section illustration.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.HazardShape.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot of HazardShape objects — plot.HazardShape","text":"Jaime Mosquera Gutiérrez jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.HazardShape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of HazardShape objects — plot.HazardShape","text":"","code":"library(EstimationTools)  #---------------------------------------------------------------------------- # Example 1: Increasing hazard and its corresponding TTT plot with simulated # data hweibull <- function(x, shape, scale) {   dweibull(x, shape, scale) / pweibull(x, shape, scale, lower.tail = FALSE) } curve(hweibull(x, shape = 2.5, scale = pi),   from = 0, to = 42,   col = \"red\", ylab = \"Hazard function\", las = 1, lwd = 2 )   y <- rweibull(n = 50, shape = 2.5, scale = pi) my_initial_guess <- TTT_hazard_shape(formula = y ~ 1)  par(mar = c(3.7, 3.7, 1, 2), mgp = c(2.5, 1, 0)) plot(my_initial_guess)   #----------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.maxlogL.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Residual Diagnostics for an maxlogL Object — plot.maxlogL","title":"Plot Residual Diagnostics for an maxlogL Object — plot.maxlogL","text":"Provides plots Cox-Snell martingale residuals.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.maxlogL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Residual Diagnostics for an maxlogL Object — plot.maxlogL","text":"","code":"# S3 method for maxlogL plot(   x,   type = c(\"rqres\", \"cox-snell\", \"martingale\"),   which.plots = 1:4,   caption = NULL,   xvar = NULL,   ... )"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.maxlogL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Residual Diagnostics for an maxlogL Object — plot.maxlogL","text":"x maxlogL object. type character type residuals plotted. default value type = \"rqres\", used compute normalized randomized quantile residuals. .plots subset numbers specify plots. See details information. caption title plots. caption = NULL, default values used. xvar explanatory variable plot residuals . ... parameters plot method.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.maxlogL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Residual Diagnostics for an maxlogL Object — plot.maxlogL","text":"Returns specified plots related residuals fitted maxlogL model.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.maxlogL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Residual Diagnostics for an maxlogL Object — plot.maxlogL","text":"type = \"rqres\", available subset 1:4, referring : 1. Quantile residuals vs. fitted values (Tukey-Ascomb plot) 2. Quantile residuals vs. index 3. Density plot quantile residuals 4. Normal Q-Q plot quantile residuals.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.maxlogL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Residual Diagnostics for an maxlogL Object — plot.maxlogL","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/plot.maxlogL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Residual Diagnostics for an maxlogL Object — plot.maxlogL","text":"","code":"library(EstimationTools)  #-------------------------------------------------------------------------------- # Example 1: Estimation in simulated normal distribution n <- 1000 x <- runif(n = n, -5, 6) y <- rnorm(n = n, mean = -2 + 3 * x, sd = exp(1 + 0.3* x)) norm_data <- data.frame(y = y, x = x)  # It does not matter the order of distribution parameters formulas <- list(sd.fo = ~ x, mean.fo = ~ x) support <- list(interval = c(-Inf, Inf), type = 'continuous')  norm_mod <- maxlogLreg(formulas, y_dist = y ~ dnorm, support = support,                        data = norm_data,                        link = list(over = \"sd\", fun = \"log_link\")) plot(norm_mod, type = \"rqres\")"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/predict.maxlogL.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Method for maxlogL Fits — predict.maxlogL","title":"Predict Method for maxlogL Fits — predict.maxlogL","text":"function computes predictions optionally estimated standard errors predictions model fitted maxlogLreg.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/predict.maxlogL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Method for maxlogL Fits — predict.maxlogL","text":"","code":"# S3 method for maxlogL predict(   object,   parameter = NULL,   newdata = NULL,   type = c(\"link\", \"response\", \"terms\"),   se.fit = FALSE,   terms = NULL,   ... )"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/predict.maxlogL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Method for maxlogL Fits — predict.maxlogL","text":"object object maxlogL class generated maxlogLreg function. parameter character specifies parameter predict. newdata data frame covariates predict. optional argument, omitted, fitted linear predictors (distribution) parameter predictions used. type character type prediction required. default (type = \"link\") scale linear predictors; alternative type = \"response\" scale distribution parameter. se.fit logical switch indicating standard errors predictions required. terms character vector specifies terms required type = \"terms\". terms returned default. ... arguments passed methods.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/predict.maxlogL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Method for maxlogL Fits — predict.maxlogL","text":"se.fit = FALSE, vector predictions returned. type = \"terms\", matrix column per term attribute \"constant\" returned. se.fit = TRUE, list following components obtained: fit: Predictions. se.fit: Estimated standard errors.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/predict.maxlogL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict Method for maxlogL Fits — predict.maxlogL","text":"predict method computes predictions values distribution parameter link original scale.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/predict.maxlogL.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Predict Method for maxlogL Fits — predict.maxlogL","text":"Variables first looked newdata argument searched usual way (include environment formula used fit). warning given variables found length newdata supplied.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/predict.maxlogL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict Method for maxlogL Fits — predict.maxlogL","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/predict.maxlogL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Method for maxlogL Fits — predict.maxlogL","text":"","code":"library(EstimationTools)  #-------------------------------------------------------------------------------- # Example 1: Predictions from a model using a simulated normal distribution n <- 1000 x <- runif(n = n, -5, 6) y <- rnorm(n = n, mean = -2 + 3 * x, sd = exp(1 + 0.3* x)) norm_data <- data.frame(y = y, x = x)  # It does not matter the order of distribution parameters formulas <- list(sd.fo = ~ x, mean.fo = ~ x)  norm_mod <- maxlogLreg(formulas, y_dist = y ~ dnorm, data = norm_data,                        link = list(over = \"sd\", fun = \"log_link\")) predict(norm_mod) #>            1            2            3            4            5            6  #>  -6.75098433  -8.51698986  11.39899821  10.74379658  14.16431436   5.41569659  #>            7            8            9           10           11           12  #>  14.28998507  16.07691155   5.31864492  13.04317236  14.08490600  14.07135430  #>           13           14           15           16           17           18  #>   5.54143805  15.98689254   5.29461346  11.87338280   5.02348910   3.97444533  #>           19           20           21           22           23           24  #>   6.39119104  13.26587582 -16.18246332  -4.42231033   5.98447189 -15.65529708  #>           25           26           27           28           29           30  #> -14.00138847 -11.38130831  -9.41149347  15.18919393  14.85635164 -10.11572294  #>           31           32           33           34           35           36  #>   8.91998943 -16.78239860  14.86551956  10.67569232   4.79791165   8.27679174  #>           37           38           39           40           41           42  #> -15.89448179  -5.06458078 -13.78692028  -9.62002739  -9.31430692   7.74530760  #>           43           44           45           46           47           48  #>  11.32839609   9.71561898  11.23913567 -16.67756357   4.47328558  10.83721126  #>           49           50           51           52           53           54  #>  -7.27293241   5.73395852  -0.40122244   2.64030121  14.54844655  -6.32747742  #>           55           56           57           58           59           60  #>  12.13253426  -0.83680986 -10.07528369  15.40450316   5.24360843   3.80408012  #>           61           62           63           64           65           66  #> -15.89601474 -11.75109750  -0.81540040   4.83280053 -11.31986353  -4.81201548  #>           67           68           69           70           71           72  #>   5.80911536  -1.66597123  -5.77536865  -3.09329089 -12.73746186 -12.95027640  #>           73           74           75           76           77           78  #>   1.27294471 -16.70701156   0.43043395  -2.03830065  -9.92543468   4.73944795  #>           79           80           81           82           83           84  #>  -2.78166087  13.18019065 -15.13514339   5.71260176 -15.77390254 -10.76608612  #>           85           86           87           88           89           90  #> -13.81801415  15.97374445   7.32099133  -1.69260874  -1.37422056 -12.93067723  #>           91           92           93           94           95           96  #>  -7.35739651   1.94156726  -1.87246480  -2.26927354  12.35913932  10.66482383  #>           97           98           99          100          101          102  #>  13.97487173  -4.40398770 -16.16280607  -4.84819567  10.33032657 -11.62669500  #>          103          104          105          106          107          108  #>   6.37992322   9.26449114 -14.01115614   9.60301826 -16.10088825   0.11576035  #>          109          110          111          112          113          114  #>  -2.52972394  13.27393034   2.56574844  -3.92137573  12.65352700   0.17300105  #>          115          116          117          118          119          120  #> -13.24475640  15.56855135   0.29830292 -14.60204963   9.22763899 -10.48477891  #>          121          122          123          124          125          126  #> -10.88080192  -7.24439670  12.57524310  12.15865700 -12.24698573  -8.48042610  #>          127          128          129          130          131          132  #>   3.38864088  -8.90342358 -10.96913963   2.36334972 -14.33876242  -0.83811929  #>          133          134          135          136          137          138  #>   8.66886992   5.72774545  -0.80806533   2.11266831   3.46103223   4.26345478  #>          139          140          141          142          143          144  #> -14.31478159  -4.11563219  13.61443358  -2.08382137  -0.42809524 -13.31025544  #>          145          146          147          148          149          150  #>  16.11049209  -1.29040946  12.38131089   2.09968544  -7.52367653   8.82356183  #>          151          152          153          154          155          156  #>  -0.28840154  -6.00455651  -5.73488781  -9.17881435  -4.06978513  10.20222086  #>          157          158          159          160          161          162  #> -13.98529240 -12.20586894  -3.13947362  -7.40400880  -3.64510424  -8.65962672  #>          163          164          165          166          167          168  #> -10.70098771  -4.78687534  14.19800980  10.71788576  13.21052069  -1.03254428  #>          169          170          171          172          173          174  #>  13.46873612   5.58123190   1.56312673  -3.78281798   0.09015206   3.87174288  #>          175          176          177          178          179          180  #> -11.89145631   0.74809012  12.02057471 -16.32375828  -2.93173973  -8.42043506  #>          181          182          183          184          185          186  #>  -4.59834539   2.27270560   7.18155501   1.80779711  -6.76197480 -14.76387700  #>          187          188          189          190          191          192  #>  11.43889982  -4.62613516   5.59970418  -4.05472845 -15.51947798   9.61699812  #>          193          194          195          196          197          198  #>  -4.33486903   9.34219567  13.48864030   3.33675621   6.77338491  -0.86737402  #>          199          200          201          202          203          204  #>  -9.30145956  14.55322227  -6.28325251  -6.38899288  14.15526706 -15.44243984  #>          205          206          207          208          209          210  #>  13.45700543  -3.34600206  -3.69947374  -3.94721672  -3.04664000  -0.48163439  #>          211          212          213          214          215          216  #>   6.18862263  -3.96579469  -7.66281731  11.48823164  10.31650382   0.57297480  #>          217          218          219          220          221          222  #>  -0.84180306  -2.53785059 -11.90130943   2.02205845 -10.02228899  -8.00912855  #>          223          224          225          226          227          228  #>  -8.51616682   3.71250256   7.45369761   7.69392887   5.96669693 -15.28571644  #>          229          230          231          232          233          234  #>   5.58251128   5.00001831   7.52205227   3.67899737   2.45026905  12.86813039  #>          235          236          237          238          239          240  #>  -2.69665515  -1.17787824 -10.38982081   9.88279337 -14.93098493  -0.02402186  #>          241          242          243          244          245          246  #> -13.02669016   0.71301150   9.75264013   6.12062234  -5.68411088  11.72807647  #>          247          248          249          250          251          252  #>   9.45821478 -15.08894968 -10.14766044   5.13951142  15.32682529  -0.94578577  #>          253          254          255          256          257          258  #> -15.66439720   3.16945293  12.90660331  -7.51559756 -11.45183011  -6.15638826  #>          259          260          261          262          263          264  #> -13.64921838  16.12891925  -2.47435522 -16.04767741   9.64735768  -7.91549898  #>          265          266          267          268          269          270  #>  -9.68275932 -16.13445327  -7.99760892  -4.31043120  -1.53604291  -0.05106069  #>          271          272          273          274          275          276  #>  10.14535244 -11.03363268   5.96812154   3.73682831  -8.26221743  -5.94484533  #>          277          278          279          280          281          282  #>   9.26893021 -15.70889839  14.53778453   2.39787662  -3.50669848   0.26670180  #>          283          284          285          286          287          288  #>   1.43538370   4.39805485  -2.45790989   7.12642787 -13.80697446   2.96894935  #>          289          290          291          292          293          294  #>   9.28775166  10.60466269 -12.52313191   4.62726944   3.26846576  14.91484327  #>          295          296          297          298          299          300  #>   2.67810914   8.68061392  -8.70339345  -2.22986881  11.13340107  -9.07752172  #>          301          302          303          304          305          306  #>  10.72917587  -6.45387455   5.91768862   9.71690208  11.40601762   1.72523441  #>          307          308          309          310          311          312  #>  13.99663329 -14.93729648  -6.21601979  -3.05326730 -11.14649026  -5.80656059  #>          313          314          315          316          317          318  #> -13.45708695   6.39161609 -13.95816520  -8.05835433   1.44919618   6.26633113  #>          319          320          321          322          323          324  #> -12.86675210  -8.80517083 -13.40231431   9.22179270 -14.13375684 -14.05523184  #>          325          326          327          328          329          330  #>  16.11312208  -2.82620700   2.31527030   5.41134354  -0.14971286  -9.84395824  #>          331          332          333          334          335          336  #>  -6.59559142   8.75325273   6.10182385 -12.11673373  -2.74730997 -10.10654480  #>          337          338          339          340          341          342  #> -10.77412551  14.22649256  -2.47445907   3.53606713   3.08644042  -4.62226296  #>          343          344          345          346          347          348  #>  12.98636500  15.49270882  -0.27344830  -5.13509336 -11.05624158  -4.43086117  #>          349          350          351          352          353          354  #>  11.32607725  -4.58879077  -9.60453660  10.32329897   0.47986847   5.44857391  #>          355          356          357          358          359          360  #> -14.99314746  11.03833413   9.82703194  10.19773205 -11.99878645  -5.43358148  #>          361          362          363          364          365          366  #>  14.65327780   8.65275991   2.49576761   5.87293951   8.13478167  14.02566517  #>          367          368          369          370          371          372  #>  -5.39024400  13.66083582  -6.72303209  -3.25986337   8.82072601 -11.00310090  #>          373          374          375          376          377          378  #>  15.87120067  -4.91266626   9.27711004 -11.02704551  -2.28498019  14.15835536  #>          379          380          381          382          383          384  #>   7.55879302  -9.24408379 -12.36380143   1.70298357   2.07940427 -15.92416262  #>          385          386          387          388          389          390  #>  14.72137856   2.11217837 -11.85775104 -15.90758009   0.91675338 -12.24347912  #>          391          392          393          394          395          396  #>  -9.58032832   9.47238688   7.22493115 -16.51889534  14.68025498   1.76706454  #>          397          398          399          400          401          402  #>   8.06361431 -11.14804940 -14.41292593  12.28583764   7.23963874  -8.87906936  #>          403          404          405          406          407          408  #>   4.12425608 -15.78384681  -5.31282147 -16.01480850  10.04496901   1.05790938  #>          409          410          411          412          413          414  #>  12.29065432  -3.58801702   4.76509185  13.54225993   8.77804708  -9.84118462  #>          415          416          417          418          419          420  #>  -8.55247190  -3.40038935  -9.42858790  15.66215610 -11.49308282  -4.06836147  #>          421          422          423          424          425          426  #>   1.62986930  -2.24531455  -1.22059944 -11.92769925   0.69940513   5.28845756  #>          427          428          429          430          431          432  #> -12.26855081  14.88685952 -16.95245501 -10.29710936   5.47475629 -11.84171470  #>          433          434          435          436          437          438  #>   1.55926647  14.89457073   4.94830117  -2.81459627   5.45338146 -15.86838313  #>          439          440          441          442          443          444  #>   9.36513194  11.89630857   9.33789273   1.96246407  -3.79476837 -16.82040454  #>          445          446          447          448          449          450  #>   9.10102150  -2.14603651   3.66252407   2.33397383  14.99026689  -8.32771403  #>          451          452          453          454          455          456  #>   8.21053713  -4.30963403  -1.80609556   5.77334816  11.86153004   0.70788014  #>          457          458          459          460          461          462  #>   9.36417487  -2.51216323  10.25595703  -8.80726323   1.92180504  -4.15626558  #>          463          464          465          466          467          468  #>   1.12577510  -9.95250615 -15.97048262 -15.92792012  10.42766110   9.76568857  #>          469          470          471          472          473          474  #>  -0.31565693   4.62855377  -3.55902962   5.80258448  15.28666194  14.05301680  #>          475          476          477          478          479          480  #> -15.69926950  -1.64053060 -12.36885137 -16.91011701 -16.45375174  -1.41661477  #>          481          482          483          484          485          486  #>  13.10697674  12.92811696  -2.08612464  15.45068530  -6.99021917  -3.98501857  #>          487          488          489          490          491          492  #>   3.94708135  -8.84699647 -15.61820459   9.34254348  14.67222885 -10.03805411  #>          493          494          495          496          497          498  #>   1.27727058  14.52144944  -0.31329772   1.56293402  -6.51634220 -12.05754902  #>          499          500          501          502          503          504  #>   5.58778224  -3.59289942 -12.32463120  -9.67907538 -11.71007802  11.44027478  #>          505          506          507          508          509          510  #>  13.60253653  16.05621857   3.38574188 -16.81206274  -6.05621674  13.54140414  #>          511          512          513          514          515          516  #>  -3.32387402  -9.43087599 -11.72520188 -10.74499799  -7.35079042  -2.79365962  #>          517          518          519          520          521          522  #>  -2.05671324 -15.89522513   7.67441898  14.35106550  -4.28189510 -14.53197374  #>          523          524          525          526          527          528  #> -16.91786301  -8.26114695  -6.19393276  -1.79906473 -12.59005671  -7.89345767  #>          529          530          531          532          533          534  #>  -5.94861120 -15.01979675 -11.43023745  14.89843550   0.22191735 -12.81849529  #>          535          536          537          538          539          540  #>   3.84210617  -2.00541787  15.13463579  -0.84080781  -7.64494886  -6.11395963  #>          541          542          543          544          545          546  #>   5.68165419   4.80798578   6.30010284 -14.20561788  -8.72291139  15.41500000  #>          547          548          549          550          551          552  #>  -1.79252593   9.63382352 -13.99250201   2.74690428  15.08769504   2.97055390  #>          553          554          555          556          557          558  #>  -1.57614764 -13.93219687   9.20592574 -10.23771280  -6.08457370  14.83873775  #>          559          560          561          562          563          564  #>   8.82208185   2.31790489  -9.95106287   0.70605345   2.26105189  12.95062788  #>          565          566          567          568          569          570  #> -14.35604188   3.61939329   7.16113196 -12.51549419  -0.74105505  15.48704166  #>          571          572          573          574          575          576  #>  14.38053240   6.16072425  13.91315926  -5.40056450  10.34133811  13.11394006  #>          577          578          579          580          581          582  #>  -7.23050401   9.18983710  -0.33489871   2.28021605  13.15174629  -1.26379393  #>          583          584          585          586          587          588  #>  -1.64191567 -13.14221254  -3.44087680  -2.75493914   2.18133860   1.73387432  #>          589          590          591          592          593          594  #> -12.99821828   4.13778788  -3.34500865   2.08135482  -6.86090538  -0.22681764  #>          595          596          597          598          599          600  #>  -8.90861509  12.07910726   6.38570689  -2.74108883  -3.73815174  15.18631295  #>          601          602          603          604          605          606  #>  14.98522181  -2.08934973 -13.14091566  13.43970411  -7.46251066  -5.48651463  #>          607          608          609          610          611          612  #>  -8.70514130   2.46208178   9.64950281  -9.66991179  -9.83874799  11.25258978  #>          613          614          615          616          617          618  #> -10.09574773   7.95304282   2.38313612  11.00360789   2.19909083 -10.72972665  #>          619          620          621          622          623          624  #>   3.97090064   3.19916579 -10.15990800  -7.71640534 -11.18746318  -7.70119118  #>          625          626          627          628          629          630  #>  -4.95612142   0.21229086 -15.83421866  12.60913374  -6.58030417  -0.29773070  #>          631          632          633          634          635          636  #>  15.72990045 -14.57468280 -14.03633395 -11.58710673   6.33314817  -0.47859143  #>          637          638          639          640          641          642  #> -13.28872103   6.30754640  -9.46737682   2.65602729   3.90421210 -11.80675722  #>          643          644          645          646          647          648  #>   8.91067249   0.12282278   2.34612598   0.07467581  -4.69723808  -7.20632310  #>          649          650          651          652          653          654  #>   1.18970137  -6.53342277  -5.68811965  12.59730331   7.14541045  -5.18235321  #>          655          656          657          658          659          660  #>  -7.88205788 -12.87167482  -1.18826081  12.95764981  -8.42750306  -5.93193178  #>          661          662          663          664          665          666  #> -13.27276493 -13.20135498  -1.28223397   6.91717903  -4.47104807 -12.18978754  #>          667          668          669          670          671          672  #>   6.30673262  -9.76788422  -6.62002428  12.33376634  -4.93797088 -16.91376493  #>          673          674          675          676          677          678  #>   7.87999127  14.41381722   8.28091001  -0.00711197  14.48671161   5.47604182  #>          679          680          681          682          683          684  #>  14.70032505 -11.13807959 -10.95434040  13.82040417  -2.23129311   9.85436621  #>          685          686          687          688          689          690  #>   3.28345317  -0.17483209 -14.39349990   1.54457064  -9.09987616  -3.50539900  #>          691          692          693          694          695          696  #>   3.82892996  -7.15320547   0.37738838  11.90714034  -2.39463739   8.15894477  #>          697          698          699          700          701          702  #> -15.97208510  -0.37219347  -5.09727482   9.02950810   8.27650713   4.42873931  #>          703          704          705          706          707          708  #>  -9.85782413   9.21482687  -6.00681453  10.85325756  -3.01722423  -7.81383446  #>          709          710          711          712          713          714  #>   6.31061471 -15.21174813  11.71846654 -16.34848060   9.78264018   5.35183880  #>          715          716          717          718          719          720  #>   2.75221340 -11.48368932 -16.23514806  -1.64159932   9.65196683 -10.16196147  #>          721          722          723          724          725          726  #>  -0.02934224  -1.88068551   0.31182543   7.17827571   9.19347031  14.25090592  #>          727          728          729          730          731          732  #>   1.57559316  10.03305956  13.63116894   1.77109651  -0.26051491  -8.75746466  #>          733          734          735          736          737          738  #> -13.40658512   7.17380302 -10.34212271  13.67761492  15.12477629 -13.43398136  #>          739          740          741          742          743          744  #>  -8.82172858   0.30341573   1.01976808 -13.74981004  12.23501327   8.18292981  #>          745          746          747          748          749          750  #>   6.52110901   8.20019919 -13.16892827  -1.17516402 -14.75068924  -5.35828942  #>          751          752          753          754          755          756  #>   3.02743197  -2.79573351  -9.72454913  14.29455041  -7.73923504   2.94422482  #>          757          758          759          760          761          762  #>  -5.23502581  -6.19074543  -1.93758225  -2.92846019  15.04074782   7.51751445  #>          763          764          765          766          767          768  #> -11.68199545   8.21064005  -0.04491284  -8.39890470 -15.37768319  -8.46090852  #>          769          770          771          772          773          774  #>  12.63154480  15.27812334   2.05382336  12.60110956 -14.93650218   0.33066536  #>          775          776          777          778          779          780  #>  -3.81148098 -13.40296239   2.99946495  12.04182482  11.46902548  12.57185357  #>          781          782          783          784          785          786  #>  14.72838437   4.38196899  -0.35466375  13.23999472  12.44589098  -5.47639002  #>          787          788          789          790          791          792  #>  12.50363545  13.28517740  11.94547014  11.26474759  16.15773916  -2.68407184  #>          793          794          795          796          797          798  #>   7.85930542   4.02921535   2.53487734  -4.09904669  -8.89466554  12.54896685  #>          799          800          801          802          803          804  #>  -5.80185745   9.26867489   0.04988395  15.53504490   2.10976161  11.34046684  #>          805          806          807          808          809          810  #>   9.89586647   4.49252445 -10.52472598 -16.60106093 -12.48645231   1.97285841  #>          811          812          813          814          815          816  #>  -4.95700001  -6.68092619 -14.79304712  -9.37954172   8.06945647 -14.23998166  #>          817          818          819          820          821          822  #>  15.90257371   9.38239008  -3.98975893  -1.87628610 -16.91028426 -16.90895533  #>          823          824          825          826          827          828  #> -13.30051554  -8.97572497   9.63296808   2.36760976  15.72190208  -4.78686723  #>          829          830          831          832          833          834  #>   5.31431476  10.99553581 -10.01069058  11.44104242   3.43390444  -2.19847765  #>          835          836          837          838          839          840  #> -14.23124960   5.70095617   4.21721269  -9.18858748   4.94681508  14.83379546  #>          841          842          843          844          845          846  #>  -4.10339432  -9.71657061  11.52408563 -11.11832015  13.63192542  15.93599361  #>          847          848          849          850          851          852  #> -11.77241388  10.65418719  10.14826128  -2.88341383   5.01511805  -7.53894547  #>          853          854          855          856          857          858  #> -12.30958347  14.56083837 -13.27995470  -0.27534486 -15.32420033 -10.90378166  #>          859          860          861          862          863          864  #> -16.49989763  14.19500145   5.46521594   8.81276878  -2.43214157  15.39133202  #>          865          866          867          868          869          870  #>   9.29356174   3.01787124  -7.07896441  -2.26066319  -9.47042829  13.02955483  #>          871          872          873          874          875          876  #>   9.53960961   8.21930383 -12.16194140   0.49077508  -6.68837719  -3.02306803  #>          877          878          879          880          881          882  #>  -1.85664973  -7.53675092   5.24793198   1.88717271   0.87950715  -0.70620695  #>          883          884          885          886          887          888  #>  -6.42695536  -0.30242430   9.78310871   9.29271038  -4.33291968 -11.86316603  #>          889          890          891          892          893          894  #>  -3.14676993   1.92337427   2.84772474  -6.29241751   3.90449429 -16.60674582  #>          895          896          897          898          899          900  #>   1.45081291  -6.40165751  -4.56976776   3.04067597  -4.03469584  -3.41085010  #>          901          902          903          904          905          906  #>   0.71771429   7.62742694  13.27616090 -13.55415485  15.34364052  -1.05147751  #>          907          908          909          910          911          912  #> -10.89218545 -13.91598876 -16.97312248  -8.75986325  -5.16688954  -8.52984814  #>          913          914          915          916          917          918  #> -11.20844730  13.68706381  -2.03724974   3.41422132  15.84163087  10.24037276  #>          919          920          921          922          923          924  #>  10.25349658  -5.36392561   0.22353635  -9.23379705  14.63197561  -0.99758726  #>          925          926          927          928          929          930  #>   6.65697424   4.46672587  15.01131258  10.42061650  -7.92986165 -12.06715136  #>          931          932          933          934          935          936  #>   7.76371834  -3.45442535  -2.47749337  -6.41708832   5.05841600   8.40857890  #>          937          938          939          940          941          942  #>  -4.39733731  -2.14882984 -10.70423702   9.42221044  -2.92690260   6.06336571  #>          943          944          945          946          947          948  #>   7.44179378  -6.21947774 -16.97901116   7.56834929  -8.63606249   1.66448248  #>          949          950          951          952          953          954  #>   9.75098572 -15.09977535   6.62454407  -3.99499634  -9.45395379  -2.12598947  #>          955          956          957          958          959          960  #>   8.54248960 -13.94270829   1.90422630   3.44146054  -3.71645990  -8.40049701  #>          961          962          963          964          965          966  #> -12.26330046   8.98988368  -6.09658641   6.20435048 -14.91237963  -0.70696708  #>          967          968          969          970          971          972  #>  14.14559987 -11.13833857   2.02954419   0.47528845  11.65902317  -2.26461985  #>          973          974          975          976          977          978  #>  -3.92335061  10.60957924 -10.01955073   4.29673298 -13.47396497   7.29080602  #>          979          980          981          982          983          984  #>  -1.08492730  -2.18010768  -7.54630884  -9.13356568  15.79567208   4.45516889  #>          985          986          987          988          989          990  #> -13.26011650 -13.52740330  -5.91338237   2.93374274   4.65600393  -6.70485304  #>          991          992          993          994          995          996  #>   1.25224885   1.53440356 -14.31885171   4.11738401  -6.59549179   8.07232009  #>          997          998          999         1000  #> -10.68884574 -12.57745098 -10.32038946 -14.62110532    #-------------------------------------------------------------------------------- # Example 2: Predictions using new values for covariates predict(norm_mod, newdata = data.frame(x=0:6)) #>         1         2         3         4         5         6         7  #> -1.944916  1.078345  4.101606  7.124866 10.148127 13.171388 16.194649    #-------------------------------------------------------------------------------- # Example 3: Predictions for another parameter predict(norm_mod, newdata = data.frame(x=0:6), param = \"sd\",        type = \"response\") #>         1         2         3         4         5         6         7  #>  2.744479  3.708497  5.011132  6.771327  9.149803 12.363734 16.706582   #-------------------------------------------------------------------------------- # Example 4: Model terms predict(norm_mod, param = \"sd\", type = \"terms\") #>             1             2             3             4             5  #> -0.6453362731 -0.8211828028  1.1619125637  1.0966721492  1.4372634837  #>             6             7             8             9            10  #>  0.5661370652  1.4497768982  1.6277065904  0.5564733362  1.3256279732  #>            11            12            13            14            15  #>  1.4293565529  1.4280071687  0.5786575236  1.6187431238  0.5540804506  #>            16            17            18            19            20  #>  1.2091484771  0.5270837749  0.4226273036  0.6632700081  1.3478032325  #>            21            22            23            24            25  #> -1.5844572564 -0.4134631374  0.6227717475 -1.5319657136 -1.3672810147  #>            26            27            28            29            30  #> -1.1063916833 -0.9102512417  1.5393138524  1.5061717363 -0.9803735069  #>            31            32            33            34            35  #>  0.9150701371 -1.6441946323  1.5070846138  1.0898908012  0.5046223441  #>            36            37            38            39            40  #>  0.8510249908 -1.5557820613 -0.4774159544 -1.3459257661 -0.9310155970  #>            41            42            43            44            45  #> -0.9005740820  0.7981035025  1.1548824966  0.9942933855  1.1459945657  #>            46            47            48            49            50  #> -1.6337558908  0.4722983413  1.1059737322 -0.6973082278  0.5978273715  #>            51            52            53            54            55  #> -0.0130712141  0.2897825258  1.4755126920 -0.6031664051  1.2349529740  #>            56            57            58            59            60  #> -0.0564439753 -0.9763468481  1.5607528461  0.5490017247  0.4056635228  #>            61            62            63            64            65  #> -1.5559347017 -1.1432127150 -0.0543121702  0.5080963362 -1.1002734397  #>            66            67            68            69            70  #> -0.4522672614  0.6053109657 -0.1390060885 -0.5481912595 -0.2811286388  #>            71            72            73            74            75  #> -1.2414280065 -1.2626185965  0.1536306889 -1.6366881157  0.0697393368  #>            76            77            78            79            80  #> -0.1760800590 -0.9614259277  0.4988009365 -0.2500986915  1.3392712997  #>            81            82            83            84            85  #> -1.4801724326  0.5957008137 -1.5437756191 -1.0451321421 -1.3490218778  #>            86            87            88            89            90  #>  1.6174339283  0.7558530442 -0.1416584663 -0.1099555897 -1.2606670479  #>            91            92            93            94            95  #> -0.7057185743  0.2202074656 -0.1595672803 -0.1990787306  1.2575167279  #>            96            97            98            99           100  #>  1.0888085929  1.4184001061 -0.4116386970 -1.5824999238 -0.4558698327  #>           101           102           103           104           105  #>  1.0555016857 -1.1308255806  0.6621480367  0.9493732176 -1.3682536117  #>           106           107           108           109           110  #>  0.9830813901 -1.5763345787  0.0384063309 -0.2250125676  1.3486052451  #>           111           112           113           114           115  #>  0.2823590798 -0.3635835593  1.2868298021  0.0441059610 -1.2919408632  #>           116           117           118           119           120  #>  1.5770876219  0.0565826485 -1.4270906696  0.9457037372 -1.0171215295  #>           121           122           123           124           125  #> -1.0565547426 -0.6944668404  1.2790348363  1.2375540946 -1.1925898103  #>           126           127           128           129           130  #> -0.8175420381  0.3642969766 -0.8596611816 -1.0653507966  0.2622056250  #>           131           132           133           134           135  #> -1.4008743625 -0.0565743594  0.8900654055  0.5972087170 -0.0535817951  #>           136           137           138           139           140  #>  0.2372445161  0.3715052039  0.4514048517 -1.3984865193 -0.3829262638  #>           141           142           143           144           145  #>  1.3825101858 -0.1806126955 -0.0157470200 -1.2984628016  1.6310503063  #>           146           147           148           149           150  #> -0.1016102641  1.2597244180  0.2359517729 -0.7222755809  0.9054685486  #>           151           152           153           154           155  #> -0.0018372948 -0.5710121903 -0.5441604597 -0.8870826758 -0.3783611330  #>           156           157           158           159           160  #>  1.0427458117 -1.3656782808 -1.1884956866 -0.2857271928 -0.7103599015  #>           161           162           163           164           165  #> -0.3360743687 -0.8353855876 -1.0386500965 -0.4497639813  1.4406186411  #>           166           167           168           169           170  #>  1.0940921306  1.3422913537 -0.0759338453  1.3680026476  0.5826199186  #>           171           172           173           174           175  #>  0.1825249939 -0.3497869434  0.0358564358  0.4124009088 -1.1571886669  #>           176           177           178           179           180  #>  0.1013693252  1.2238048222 -1.5985264236 -0.2650424996 -0.8115685491  #>           181           182           183           184           185  #> -0.4309914821  0.2531799147  0.7419689461  0.2068875659 -0.6464306276  #>           186           187           188           189           190  #> -1.4432043117  1.1658856879 -0.4337585944  0.5844592593 -0.3768618941  #>           191           192           193           194           195  #> -1.5184417939  0.9844734071 -0.4047563412  0.9571104930  1.3699845680  #>           196           197           198           199           200  #>  0.3591306629  0.7013262107 -0.0594873411 -0.8992948311  1.4759882247  #>           201           202           203           204           205  #> -0.5987627973 -0.6092916863  1.4363626167 -1.5107708723  1.3668345878  #>           206           207           208           209           210  #> -0.3062918564 -0.3414881039 -0.3661566243 -0.2764834674 -0.0210780755  #>           211           212           213           214           215  #>  0.6430996563 -0.3680064890 -0.7361302503  1.1707978070  1.0541253121  #>           216           217           218           219           220  #>  0.0839325614 -0.0569411630 -0.2258217628 -1.1581697726  0.2282222174  #>           221           222           223           224           225  #> -0.9710700056 -0.7706135117 -0.8211008509  0.3965448677  0.7690670111  #>           226           227           228           229           230  #>  0.7929875662  0.6210018409 -1.4951654478  0.5827473105  0.5247467177  #>           231           232           233           234           235  #>  0.7758732923  0.3932086543  0.2708604464  1.3081985129 -0.2416344140  #>           236           237           238           239           240  #> -0.0904051884 -1.0076662638  1.0109394464 -1.4598437552  0.0244877925  #>           241           242           243           244           245  #> -1.2702273468  0.0978764408  0.9979796943  0.6363286612 -0.5391044465  #>           246           247           248           249           250  #>  1.1946798849  0.9686628685 -1.4755727853 -0.9835536213  0.5386364696  #>           251           252           253           254           255  #>  1.5530182252 -0.0672950367 -1.5328718403  0.3424717680  1.3120293782  #>           256           257           258           259           260  #> -0.7214711335 -1.1134137529 -0.5861305381 -1.3322143702  1.6328851544  #>           261           262           263           264           265  #> -0.2194993358 -1.5710362140  0.9874964010 -0.7612905305 -0.9372620057  #>           266           267           268           269           270  #> -1.5796767496 -0.7694664668 -0.4023229924 -0.1260687314  0.0217954542  #>           271           272           273           274           275  #>  1.0370832502 -1.0717725653  0.6211436935  0.3989670564 -0.7958143392  #>           276           277           278           279           280  #> -0.5650665666  0.9498152291 -1.5373029587  1.4744510422  0.2656435732  #>           281           282           283           284           285  #> -0.3222928865  0.0534360299  0.1698052324  0.4648073887 -0.2178618240  #>           286           287           288           289           290  #>  0.7364797699 -1.3479226221  0.3225070183  0.9516893385  1.0828181660  #>           291           292           293           294           295  #> -1.2200865232  0.4876309818  0.3523307755  1.5119959249  0.2935471759  #>           296           297           298           299           300  #>  0.8912347906 -0.8397435743 -0.1951550818  1.1354662503 -0.8769966610  #>           301           302           303           304           305  #>  1.0952163202 -0.6157521511  0.6161219347  0.9944211482  1.1626115078  #>           306           307           308           309           310  #>  0.1986665474  1.4205669713 -1.4604722158 -0.5920682314 -0.2771433684  #>           311           312           313           314           315  #> -1.0830101368 -0.5512971358 -1.3130832608  0.6633123310 -1.3629771432  #>           316           317           318           319           320  #> -0.7755150720  0.1711805829  0.6508373280 -1.2543018285 -0.8498778563  #>           321           322           323           324           325  #> -1.3076293831  0.9451216039 -1.3804613354 -1.3726423625  1.6313121824  #>           326           327           328           329           330  #> -0.2545342847  0.2574182117  0.5657036186  0.0119723579 -0.9533130709  #>           331           332           333           334           335  #> -0.6298633297  0.8984676573  0.6344568386 -1.1796202234 -0.2466782687  #>           336           337           338           339           340  #> -0.9794596117 -1.0459326490  1.4434547556 -0.2195096763  0.3789766558  #>           341           342           343           344           345  #>  0.3342059602 -0.4333730272  1.3199714917  1.5695357509 -0.0003483555  #>           346           347           348           349           350  #> -0.4844371058 -1.0740238018 -0.4143145699  1.1546516028 -0.4300400997  #>           351           352           353           354           355  #> -0.9294731316  1.0548019259  0.0746616815  0.5694107596 -1.4660334667  #>           356           357           358           359           360  #>  1.1260001467  1.0053871121  1.0422988465 -1.1678758546 -0.5141584737  #>           361           362           363           364           365  #>  1.4859510572  0.8884612823  0.2753908763  0.6116661306  0.8368846178  #>           366           367           368           369           370  #>  1.4234577631 -0.5098432300  1.3871305983 -0.6425529839 -0.2977147658  #>           371           372           373           374           375  #>  0.9051861772 -1.0687324230  1.6072233335 -0.4622893648  0.9506297195  #>           376           377           378           379           380  #> -1.0711166604 -0.2006426889  1.4366701278  0.7795316803 -0.8935817519  #>           381           382           383           384           385  #> -1.2042215039  0.1964509639  0.2339323153 -1.5587374715  1.4927320568  #>           386           387           388           389           390  #>  0.2371957316 -1.1538325311 -1.5570862993  0.1181636380 -1.1922406471  #>           391           392           393           394           395  #> -0.9270626404  0.9700740276  0.7462880400 -1.6179568130  1.4886372569  #>           396           397           398           399           400  #>  0.2028317003  0.8297982674 -1.0831653854 -1.4082590484  1.2502178565  #>           401           402           403           404           405  #>  0.7477525195 -0.8572361573  0.4375444145 -1.5447658009 -0.5021340334  #>           406           407           408           409           410  #> -1.5677633569  1.0270877677  0.1322189690  1.2506974679 -0.3303900204  #>           411           412           413           414           415  #>  0.5013543774  1.3753236372  0.9009365065 -0.9530368937 -0.8247158575  #>           416           417           418           419           420  #> -0.3117073642 -0.9119533866  1.5864081313 -1.1175214099 -0.3782193752  #>           421           422           423           424           425  #>  0.1891707544 -0.1966930608 -0.0946590680 -1.1607974863  0.0965216126  #>           426           427           428           429           430  #>  0.5534674884 -1.1947371108  1.5092094978 -1.6611276652 -0.9984347030  #>           431           432           433           434           435  #>  0.5720178192 -1.1522357446  0.1821406156  1.5099773269  0.5195970852  #>           436           437           438           439           440  #> -0.2533781691  0.5698894619 -1.5531833385  0.9593943278  1.2114312657  #>           441           442           443           444           445  #>  0.9566820363  0.2222882249 -0.3509768801 -1.6479789990  0.9330960496  #>           446           447           448           449           450  #> -0.1868076459  0.3915683577  0.2592805781  1.5195060837 -0.8023360339  #>           451           452           453           454           455  #>  0.8444278190 -0.4022436164 -0.1529586932  0.6017495176  1.2079682610  #>           456           457           458           459           460  #>  0.0973654955  0.9592990293 -0.2232639944  1.0480964852 -0.8500862031  #>           461           462           463           464           465  #>  0.2182396814 -0.3869722537  0.1389765651 -0.9641215157 -1.5633496945  #>           466           467           468           469           470  #> -1.5591116172  1.0651935806  0.9992789662 -0.0045511962  0.4877588663  #>           471           472           473           474           475  #> -0.3275036572  0.6046606667  1.5490190384  1.4261812479 -1.5363441810  #>           476           477           478           479           480  #> -0.1364728877 -1.2047243422 -1.6569119420 -1.6114702671 -0.1141769095  #>           481           482           483           484           485  #>  1.3319811690  1.3141715578 -0.1808420388  1.5653513424 -0.6691576122  #>           486           487           488           489           490  #> -0.3699206692  0.4199025890 -0.8540425628 -1.5282723017  0.9571451260  #>           491           492           493           494           495  #>  1.4878380707 -0.9726397865  0.1540614294  1.4728245078 -0.0043162832  #>           496           497           498           499           500  #>  0.1825058046 -0.6219722443 -1.1737270225  0.5832721559 -0.3308761759  #>           501           502           503           504           505  #> -1.2003212054 -0.9368951845 -1.1391282803  1.1660225969  1.3813255612  #>           506           507           508           509           510  #>  1.6256461267  0.3640083147 -1.6471483810 -0.5761561561  1.3752384233  #>           511           512           513           514           515  #> -0.3040885001 -0.9121812180 -1.1406342091 -1.0430323332 -0.7050607858  #>           516           517           518           519           520  #> -0.2512934438 -0.1779134561 -1.5558560782  0.7910449079  1.4558588620  #>           521           522           523           524           525  #> -0.3994815665 -1.4201129999 -1.6576832353 -0.7957077479 -0.5898689582  #>           526           527           528           529           530  #> -0.1522586127 -1.2267504290 -0.7590958109 -0.5654415465 -1.4686870179  #>           531           532           533           534           535  #> -1.1112637061  1.5103621532  0.0489767062 -1.2494967517  0.4094498918  #>           536           537           538           539           540  #> -0.1728058211  1.5338813334 -0.0568420634 -0.7343510347 -0.5819057912  #>           541           542           543           544           545  #>  0.5926192707  0.5056254554  0.6542000790 -1.3876167567 -0.8416870344  #>           546           547           548           549           550  #>  1.5617980483 -0.1516075242  0.9861487631 -1.3663961635  0.3003973165  #>           551           552           553           554           555  #>  1.5292073007  0.3226667880 -0.1300620818 -1.3603913977  0.9435416830  #>           556           557           558           559           560  #> -0.9925204078 -0.5789797451  1.5044178671  0.9053211818  0.2576805458  #>           561           562           563           564           565  #> -0.9639778042  0.0971836060  0.2520195193  1.3164130382 -1.4025949310  #>           566           567           568           569           570  #>  0.3872736950  0.7399353615 -1.2193260123 -0.0469093783  1.5689714545  #>           571           572           573           574           575  #>  1.4587929704  0.6403217301  1.4122552085 -0.5108708736  1.0565981380  #>           576           577           578           579           580  #>  1.3326745280 -0.6930835033  0.9419396885 -0.0064671589  0.2539277535  #>           581           582           583           584           585  #>  1.3364390085 -0.0989600744 -0.1366108036 -1.2817302607 -0.3157388225  #>           586           587           588           589           590  #> -0.2474379276  0.2440822252  0.1995268494 -1.2673923147  0.4388918173  #>           591           592           593           594           595  #> -0.3061929396  0.2341265368 -0.6562814456  0.0042948012 -0.8601781159  #>           596           597           598           599           600  #>  1.2296330855  0.6627239341 -0.2460588109 -0.3453393897  1.5390269853  #>           601           602           603           604           605  #>  1.5190037296 -0.1811631703 -1.2816011264  1.3651118428 -0.7161851093  #>           606           607           608           609           610  #> -0.5194291883 -0.8399176128  0.2720366756  0.9877099975 -0.9359827379  #>           611           612           613           614           615  #> -0.9527942708  1.1473342323 -0.9783845151  0.8187883284  0.2641758170  #>           616           617           618           619           620  #>  1.1225423493  0.2458498690 -1.0415117200  0.4222743478  0.3454303670  #>           621           622           623           624           625  #> -0.9847731472 -0.7414661732 -1.0870899355 -0.7399512531 -0.4666163267  #>           626           627           628           629           630  #>  0.0480181675 -1.5497814782  1.2824094305 -0.6283411322 -0.0027662274  #>           631           632           633           634           635  #>  1.5931536421 -1.4243656706 -1.3707606419 -1.1268836561  0.6574905032  #>           636           637           638           639           640  #> -0.0207750793 -1.2963185549  0.6549412573 -0.9158157168  0.2913484186  #>           641           642           643           644           645  #>  0.4156339681 -1.1487549215  0.9141424211  0.0391095585  0.2604906054  #>           646           647           648           649           650  #>  0.0343154191 -0.4408385277 -0.6906757368  0.1453418979 -0.6236730083  #>           651           652           653           654           655  #> -0.5395036117  1.2812314387  0.7383699229 -0.4891429126 -0.7579606986  #>           656           657           658           659           660  #> -1.2547919985 -0.0914390123  1.3171122328 -0.8122723311 -0.5637807261  #>           661           662           663           664           665  #> -1.2947297583 -1.2876192527 -0.1007962055  0.7156442281 -0.4183161021  #>           666           667           668           669           670  #> -1.1868944130  0.6548602267 -0.9457381503 -0.6322961843  1.2549902625  #>           671           672           673           674           675  #> -0.4648090231 -1.6572751767  0.8115143639  1.4621072406  0.8514350601  #>           676           677           678           679           680  #>  0.0261715615  1.4693655562  0.5721458232  1.4906356949 -1.0821726616  #>           681           682           683           684           685  #> -1.0638771924  1.4030193024 -0.1952969035  1.0081088684  0.3538231172  #>           686           687           688           689           690  #>  0.0094711602 -1.4063247400  0.1806773072 -0.8792225612 -0.3221634932  #>           691           692           693           694           695  #>  0.4081378969 -0.6853866533  0.0644574282  1.2125098172 -0.2115615899  #>           696           697           698           699           700  #>  0.8392906110 -1.5635092584 -0.0101807114 -0.4806713994  0.9259752435  #>           701           702           703           704           705  #>  0.8509966514  0.4678627334 -0.9546937397  0.9444279952 -0.5712370279  #>           706           707           708           709           710  #>  1.1075715109 -0.2735544506 -0.7511674866  0.6552467785 -1.4878001986  #>           711           712           713           714           715  #>  1.1937229945 -1.6009881002  1.0009668902  0.5597785511  0.3009259614  #>           716           717           718           719           720  #> -1.1165860710 -1.5897032352 -0.1365793040  0.9879553481 -0.9849776183  #>           721           722           723           724           725  #>  0.0239580258 -0.1603858416  0.0579291260  0.7416424168  0.9423014582  #>           726           727           728           729           730  #>  1.4458856681  0.1837663142  1.0259019072  1.3841765766  0.2032331762  #>           731           732           733           734           735  #>  0.0009394618 -0.8451276086 -1.3080546402  0.7411970576 -1.0029168188  #>           736           737           738           739           740  #>  1.3888013437  1.5328995924 -1.3107825667 -0.8515265621  0.0570917464  #>           741           742           743           744           745  #>  0.1284211238 -1.3422305870  1.2451571202  0.8416788736  0.6762063344  #>           746           747           748           749           750  #>  0.8433984383 -1.2843904270 -0.0901349254 -1.4418911664 -0.5066614148  #>           751           752           753           754           755  #>  0.3283303094 -0.2514999473 -0.9414231442  1.4502314831 -0.7437393953  #>           756           757           758           759           760  #>  0.3200451212 -0.4943876833 -0.5895515861 -0.1660512218 -0.2647159457  #>           761           762           763           764           765  #>  1.5245326227  0.7754214475 -1.1363320138  0.8444380662  0.0224076138  #>           766           767           768           769           770  #> -0.8094247057 -1.5043228568 -0.8155986142  1.2846409682  1.5481688241  #>           771           772           773           774           775  #>  0.2313851464  1.2816104386 -1.4603931244  0.0598050750 -0.3526410050  #>           776           777           778           779           780  #> -1.3076939144  0.3255455492  1.2259207595  1.1688853916  1.2786973313  #>           781           782           783           784           785  #>  1.4934296469  0.4632056710 -0.0084352237  1.3452261722  1.2661548534  #>           786           787           788           789           790  #> -0.5184210508  1.2719046458  1.3497251488  1.2163264322  1.1485448224  #>           791           792           793           794           795  #>  1.6357548402 -0.2403814556  0.8094546111  0.4280809207  0.2792851511  #>           796           797           798           799           800  #> -0.3812747955 -0.8587891166  1.2764184308 -0.5508288296  0.9497898064  #>           801           802           803           804           805  #>  0.0318468182  1.5737512836  0.2369550871  1.1560844177  1.0122411755  #>           806           807           808           809           810  #>  0.4742140141 -1.0210991810 -1.6261382904 -1.2164342245  0.2233232206  #>           811           812           813           814           815  #> -0.4667038112 -0.6383603720 -1.4461088687 -0.9070697094  0.8303799890  #>           816           817           818           819           820  #> -1.3910384624  1.6103472418  0.9611127730 -0.3703926816 -0.1599477783  #>           821           822           823           824           825  #> -1.6569285955 -1.6567962700 -1.2974929708 -0.8668604500  0.9860635846  #>           826           827           828           829           830  #>  0.2626298105  1.5923572199 -0.4497631741  0.5560421686  1.1217385880  #>           831           832           833           834           835  #> -0.9699151159  1.1660990331  0.3688040069 -0.1920293686 -1.3901689856  #>           836           837           838           839           840  #>  0.5945412271  0.4468003864 -0.8880558164  0.5194491101  1.5039257488  #>           841           842           843           844           845  #> -0.3817077024 -0.9406286980  1.1743678979 -1.0802051534  1.3842519018  #>           846           847           848           849           850  #>  1.6136749628 -1.1453352513  1.0877494704  1.0373728920 -0.2602305433  #>           851           852           853           854           855  #>  0.5262502441 -0.7237959551 -1.1988228578  1.4767465830 -1.2954456650  #>           856           857           858           859           860  #> -0.0005372009 -1.4989974063 -1.0588429050 -1.6160651535  1.4403190905  #>           861           862           863           864           865  #>  0.5710678569  0.9043938513 -0.2152959940  1.5594413555  0.9522678651  #>           866           867           868           869           870  #>  0.3273783187 -0.6779942451 -0.1982213715 -0.9161195603  1.3242720341  #>           871           872           873           874           875  #>  0.9767675982  0.8453007460 -1.1841216879  0.0757476862 -0.6391022904  #>           876           877           878           879           880  #> -0.2741363348 -0.1579925258 -0.7235774373  0.5494322338  0.2147912354  #>           881           882           883           884           885  #>  0.1144549180 -0.0434394470 -0.6130717262 -0.0032335830  1.0010135429  #>           886           887           888           889           890  #>  0.9521830929 -0.4045622384 -1.1543717185 -0.2864537091  0.2183959346  #>           891           892           893           894           895  #>  0.3104363154 -0.5996753833  0.4156620669 -1.6267043523  0.1713415661  #>           896           897           898           899           900  #> -0.6105527425 -0.4281459206  0.3296490551 -0.3748671861 -0.3127489728  #>           901           902           903           904           905  #>  0.0983447115  0.7863657673  1.3488273488 -1.3227486066  1.5546925681  #>           906           907           908           909           910  #> -0.0778190847 -1.0576882350 -1.3587775068 -1.6631855876 -0.8453664436  #>           911           912           913           914           915  #> -0.4876031488 -0.8224631415 -1.0891793877  1.3897421982 -0.1759754168  #>           916           917           918           919           920  #>  0.3668440992  1.6042789786  1.0465447116  1.0478514908 -0.5072226280  #>           921           922           923           924           925  #>  0.0491379146 -0.8925574706  1.4838299342 -0.0724530684  0.6897348477  #>           926           927           928           929           930  #>  0.4716451711  1.5216016668  1.0644921278 -0.7627206654 -1.1746831566  #>           931           932           933           934           935  #>  0.7999367161 -0.3170878929 -0.2198118106 -0.6120892350  0.5305615526  #>           936           937           938           939           940  #>  0.8641474385 -0.4109764977 -0.1870857861 -1.0389736396  0.9650778072  #>           941           942           943           944           945  #> -0.2645608513  0.6306274444  0.7678817103 -0.5924125497 -1.6637719413  #>           946           947           948           949           950  #>  0.7804832262 -0.8330392261  0.1926172930  0.9978149594 -1.4766507300  #>           951           952           953           954           955  #>  0.6865056766 -0.3709141863 -0.9144791450 -0.1848115008  0.8774813333  #>           956           957           958           959           960  #> -1.3614380516  0.2164893133  0.3695563908 -0.3431794680 -0.8095832565  #>           961           962           963           964           965  #> -1.1942143178  0.9220297194 -0.5801758868  0.6446657264 -1.4579911688  #>           966           967           968           969           970  #> -0.0435151353  1.4354000256 -1.0821984482  0.2289675952  0.0742056348  #>           971           972           973           974           975  #>  1.1878040378 -0.1986153487 -0.3637802033  1.0833077216 -0.9707973488  #>           976           977           978           979           980  #>  0.4547184627 -1.3147638565  0.7528474016 -0.0811497816 -0.1902002151  #>           981           982           983           984           985  #> -0.7245291482 -0.8825771280  1.5997027224  0.4704944069 -1.2934703150  #>           986           987           988           989           990  #> -1.3200848729 -0.5619337048  0.3190013885  0.4904921613 -0.6407428407  #>           991           992           993           994           995  #>  0.1515699400  0.1796649408 -1.3988917930  0.4368601417 -0.6298534093  #>           996           997           998           999          1000  #>  0.8306651282 -1.0374410838 -1.2254952386 -1.0007527738 -1.4289881023    #--------------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/print.HazardShape.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for HazardShape objects — print.HazardShape","title":"Print method for HazardShape objects — print.HazardShape","text":"Displays estimated hazard shape given HazardShape object.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/print.HazardShape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for HazardShape objects — print.HazardShape","text":"","code":"# S3 method for HazardShape print(x, ...)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/print.HazardShape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for HazardShape objects — print.HazardShape","text":"x object class HazardShape, generated TTT_hazard_shape. ... arguments passed methods.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/print.HazardShape.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print method for HazardShape objects — print.HazardShape","text":"Jaime Mosquera Gutiérrez jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/print.HazardShape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for HazardShape objects — print.HazardShape","text":"","code":"#-------------------------------------------------------------------------------- # Example 1: Increasing hazard and its corresponding TTT plot with simulated data  hweibull <- function(x, shape, scale){   dweibull(x, shape, scale)/pweibull(x, shape, scale, lower.tail = FALSE)   } curve(hweibull(x, shape = 2.5, scale = pi), from = 0, to = 42,                col = \"red\", ylab = \"Hazard function\", las = 1, lwd = 2)   y <- rweibull(n = 50, shape = 2.5, scale = pi) my_initial_guess <- TTT_hazard_shape(formula = y ~ 1) print(my_initial_guess) #> -------------------------------------------------------------------- #> Hazard shape: Increasing #> -------------------------------------------------------------------- #> Successful estimate!   #--------------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/reduction_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduction cells — reduction_cells","title":"Reduction cells — reduction_cells","text":"Times failure (units 1000 days) 20 aluminum reduction cells.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/reduction_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduction cells — reduction_cells","text":"","code":"reduction_cells"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/reduction_cells.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Reduction cells — reduction_cells","text":"data frame 20 observations.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/reduction_cells.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Reduction cells — reduction_cells","text":"Whitmore GA (1983). “regression method censored inverse-Gaussian data.” Canadian Journal Statistics, 11(4), 305--315. ISSN 03195724, doi:10.2307/3314888 .","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/reduction_cells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduction cells — reduction_cells","text":"","code":"data(reduction_cells) par(mfrow = c(1,2)) hist(reduction_cells$days, main=\"\", xlab=\"Time (Days)\") plot(reduction_cells$status, xlab = \"Status\", lty = 3, type=\"h\") points(reduction_cells$status, pch = 16)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/residuals.maxlogL.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Residuals from maxlogL model. — residuals.maxlogL","title":"Extract Residuals from maxlogL model. — residuals.maxlogL","text":"residuals.maxlogL maxlogLreg specific method generic function residuals extracts residuals fitted model.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/residuals.maxlogL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Residuals from maxlogL model. — residuals.maxlogL","text":"","code":"# S3 method for maxlogL residuals(object, parameter = NULL, type = \"rqres\", routine, ...)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/residuals.maxlogL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Residuals from maxlogL model. — residuals.maxlogL","text":"object object maxlogL class obtained fitting model maxlogLreg. parameter character specifies residuals specific parameter. type character type residuals computed. default value type = \"rqres\", used compute normalized randomized quantile residuals. routine character specifying integration routine. integrate gauss_quad available. Custom routines can defined must compatible integration API. ... arguments integration routine.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/residuals.maxlogL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Residuals from maxlogL model. — residuals.maxlogL","text":"vector specified residuals maxlogLreg model.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/residuals.maxlogL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Residuals from maxlogL model. — residuals.maxlogL","text":"type = \"deviance\", residuals computed using following expression $$r^D_i = \\mbox{sign}(y_i - \\hat{\\mu}_i) d_i^{1/2},$$ \\(d_i\\) residual deviance data point. context, \\(\\hat{\\mu}\\) estimated mean, computed expected value using estimated parameters fitted maxlogLreg model. hand, type = \"response\" computation simpler $$r^R_i = (y_i - \\hat{\\mu}_i).$$","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/residuals.maxlogL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract Residuals from maxlogL model. — residuals.maxlogL","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/summary.maxlogL.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Maximum Likelihood Estimation — summary.maxlogL","title":"Summarize Maximum Likelihood Estimation — summary.maxlogL","text":"Displays maximum likelihood estimates computed maxlogL standard errors, AIC BIC. summary method maxlogL object.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/summary.maxlogL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Maximum Likelihood Estimation — summary.maxlogL","text":"","code":"# S3 method for maxlogL summary(object, ...)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/summary.maxlogL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Maximum Likelihood Estimation — summary.maxlogL","text":"object object maxlogL class summary desired. ... additional arguments affecting summary produced.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/summary.maxlogL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Maximum Likelihood Estimation — summary.maxlogL","text":"list information summarize results maxlogL class object.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/summary.maxlogL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Maximum Likelihood Estimation — summary.maxlogL","text":"summary method computes displays AIC, BIC, estimates standard errors estimated model stored maxlogL class object.  also displays computes Z-score p values significance test parameters.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/summary.maxlogL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize Maximum Likelihood Estimation — summary.maxlogL","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/summary.maxlogL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Maximum Likelihood Estimation — summary.maxlogL","text":"","code":"library(EstimationTools)  #-------------------------------------------------------------------------------- ### First example: One known parameter  x <- rnorm(n = 10000, mean = 160, sd = 6) theta_1 <- maxlogL(x = x, dist = 'dnorm', control = list(trace = 1),                  link = list(over = \"sd\", fun = \"log_link\"),                  fixed = list(mean = 160)) #>   0:     43080.987:  1.00000 #>   1:     32422.762:  2.00000 #>   2:     32170.775:  1.91451 #>   3:     32020.755:  1.74935 #>   4:     32010.030:  1.78651 #>   5:     32009.831:  1.78219 #>   6:     32009.831:  1.78204 #>   7:     32009.831:  1.78204 summary(theta_1) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>        AIC      BIC #>   64019.66 64019.66 #> _______________________________________________________________ #>    Estimate  Std. Error Z value Pr(>|z|)     #> sd   5.94199    0.04202   141.4   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---   #-------------------------------------------------------------------------------- # Second example: Binomial probability parameter estimation with variable # creation  N <- rbinom(n = 100, size = 10, prob = 0.3) phat <- maxlogL(x = N, dist = 'dbinom', fixed = list(size = 10),                 link = list(over = \"prob\", fun = \"logit_link\"))  ## Standard error calculation method print(phat$outputs$StdE_Method) #> [1] \"Hessian from optim\"  ## 'summary' method summary(phat) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>        AIC      BIC #>   344.7216 344.7216 #> _______________________________________________________________ #>      Estimate  Std. Error Z value Pr(>|z|)     #> prob   0.29600    0.01444    20.5   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---  #-------------------------------------------------------------------------------- # Third example: Binomial probability parameter estimation with no variable # creation  N <- rbinom(n = 100, size = 10, prob = 0.3) summary(maxlogL(x = N, dist = 'dbinom', fixed = list(size = 10),                 link = list(over = \"prob\", fun = \"logit_link\"))) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>        AIC      BIC #>   356.8427 356.8427 #> _______________________________________________________________ #>      Estimate  Std. Error Z value Pr(>|z|)     #> prob   0.28200    0.01423   19.82   <2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---  #-------------------------------------------------------------------------------- # Fourth example: Estimation in a regression model with simulated normal data n <- 1000 x <- runif(n = n, -5, 6) y <- rnorm(n = n, mean = -2 + 3 * x, sd = exp(1 + 0.3* x)) norm_data <- data.frame(y = y, x = x) formulas <- list(sd.fo = ~ x, mean.fo = ~ x)  norm_mod <- maxlogLreg(formulas, y_dist = y ~ dnorm, data = norm_data,                        link = list(over = \"sd\", fun = \"log_link\"))  ## 'summary' method summary(norm_mod) #> _______________________________________________________________ #> Optimization routine: nlminb  #> Standard Error calculation: Hessian from optim  #> _______________________________________________________________ #>       AIC      BIC #>   5094.26 5113.891 #> _______________________________________________________________ #> Fixed effects for mean #> --------------------------------------------------------------- #>              Estimate Std. Error Z value  Pr(>|z|)     #> (Intercept) -2.004443   0.112976 -17.742 < 2.2e-16 *** #> x            3.006509   0.029986 100.264 < 2.2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Fixed effects for log(sd)  #> --------------------------------------------------------------- #>              Estimate Std. Error Z value  Pr(>|z|)     #> (Intercept) 0.9943951  0.0225684  44.061 < 2.2e-16 *** #> x           0.3004893  0.0070734  42.482 < 2.2e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #> _______________________________________________________________ #> Note: p-values valid under asymptotic normality of estimators  #> ---   #--------------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/summate.html","id":null,"dir":"Reference","previous_headings":"","what":"Summation of One-Dimensional Functions — summate","title":"Summation of One-Dimensional Functions — summate","text":"Discrete summation functions one variable finite semi-infinite interval.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/summate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summation of One-Dimensional Functions — summate","text":"","code":"summate(fun, lower, upper, tol = 1e-10, ...)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/summate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summation of One-Dimensional Functions — summate","text":"fun R function take numeric argument x possibly parameters. function returns numerical vector value given argument x. lower numeric value lower limit integral. upper numeric value upper limit integral. tol numeric value indicating accuracy result (useful infinite summations). ... additional arguments passed fun.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/summate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summation of One-Dimensional Functions — summate","text":"Arguments ... must matched exactly. limits infinite, function fails. semi-infinite intervals, summation must convergent. accomplished manny probability mass functions.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/summate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summation of One-Dimensional Functions — summate","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/summate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summation of One-Dimensional Functions — summate","text":"","code":"library(EstimationTools)   #---------------------------------------------------------------------------- # Example 1: Poisson expected value computation, X ~ Poisson(lambda = 15) Poisson_integrand <- function(x, lambda) {   x * lambda^x * exp(-lambda)/factorial(x) }  summate(fun = Poisson_integrand, lower = 0, upper = Inf, lambda = 15) #> [1] 15   #----------------------------------------------------------------------------"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/uniform_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniform key function — uniform_key","title":"Uniform key function — uniform_key","text":"function provides uniform key function model fitting distance sampling.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/uniform_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniform key function — uniform_key","text":"","code":"uniform_key(x, w)"},{"path":"https://jaimemosg.github.io/EstimationTools/reference/uniform_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uniform key function — uniform_key","text":"x vector perpendicular distances transect. w half width strip transect.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/uniform_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uniform key function — uniform_key","text":"numeric value corresponding given value x w.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/uniform_key.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Uniform key function — uniform_key","text":"uniform key function parameter sigma. expression given \\(g(x) = \\frac{1}{w},\\) x > 0.","code":""},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/reference/uniform_key.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Uniform key function — uniform_key","text":"Jaime Mosquera Gutiérrez, jmosquerag@unal.edu.co","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/reference/uniform_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uniform key function — uniform_key","text":"","code":"library(EstimationTools)  #---------------------------------------------------------------------------- # Example: Uniform function uniform_key(x=1, w=100) #> [1] 0.01 curve(uniform_key(x, w=100), from=0, to=10, ylab='g(x)')   #----------------------------------------------------------------------------"},{"path":[]},{"path":"https://jaimemosg.github.io/EstimationTools/news/index.html","id":"estimationtools-411","dir":"Changelog","previous_headings":"","what":"EstimationTools 4.1.1","title":"EstimationTools 4.1.1","text":"Implementation residuals: Cox-Snell, randomized quantile residuals martingale.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/news/index.html","id":"estimationtools-410","dir":"Changelog","previous_headings":"","what":"EstimationTools 4.1.0","title":"EstimationTools 4.1.0","text":"implemented two functions compute expected values.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/news/index.html","id":"estimationtools-401","dir":"Changelog","previous_headings":"","what":"EstimationTools 4.0.1","title":"EstimationTools 4.0.1","text":"fixed hazard function routine implemented compute hazard functions distribution. also implemented routine compute cumulative hazard functions distribution. fixed updated documentation.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/news/index.html","id":"estimationtools-400","dir":"Changelog","previous_headings":"","what":"EstimationTools 4.0.0","title":"EstimationTools 4.0.0","text":"CRAN release: 2022-12-10 changed behaviour plot.HazardShape function, responsibility splitted. Now, function just plots empirical TTT function, also created legend.HazardShape customize legend options. fixed examples documentation.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/news/index.html","id":"estimationtools-300","dir":"Changelog","previous_headings":"","what":"EstimationTools 3.0.0","title":"EstimationTools 3.0.0","text":"EstimationTools build R 4.2.1. version, maxlogLreg returns censorship matrix. Check documentation information censorship matrix. implemented wrapper (API) integration routines.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/news/index.html","id":"estimationtools-240","dir":"Changelog","previous_headings":"","what":"EstimationTools 2.4.0","title":"EstimationTools 2.4.0","text":"New!!! genetic algorithm (GA::ga) implemented maxlogL. Custom optimization interface enabled (tests required).","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/news/index.html","id":"estimationtools-230","dir":"Changelog","previous_headings":"","what":"EstimationTools 2.3.0","title":"EstimationTools 2.3.0","text":"New coef method implemented. Link functions updated, precision problems solved. Link functions specified summary (maxlogLreg) print methods. Bug answer class object DEoptim fixed.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/news/index.html","id":"estimationtools-220","dir":"Changelog","previous_headings":"","what":"EstimationTools 2.2.0","title":"EstimationTools 2.2.0","text":"TTT_hazard_shape implemented method classes EmpiricalTTT formula objects. Hazard_Shape function deprecated. implemented ‘print’ method TTT_hazard_shape objects. plot.HazardShape: flexibility plot options enabled. Bug se.fit(predict method) fixed.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/news/index.html","id":"estimationtools-211","dir":"Changelog","previous_headings":"","what":"EstimationTools 2.1.1","title":"EstimationTools 2.1.1","text":"Default value data (NULL) order handle data inside another function (use apply family) TTT functions. New data sets examples added. also referenced.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/news/index.html","id":"estimationtools-210","dir":"Changelog","previous_headings":"","what":"EstimationTools 2.1.0","title":"EstimationTools 2.1.0","text":"CRAN release: 2021-03-10 Function hazard shape estimation implemented. plot method also implemented.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/news/index.html","id":"estimationtools-202","dir":"Changelog","previous_headings":"","what":"EstimationTools 2.0.2","title":"EstimationTools 2.0.2","text":"Empirical TTT numerical (grouped) covariate.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/news/index.html","id":"estimationtools-201","dir":"Changelog","previous_headings":"","what":"EstimationTools 2.0.1","title":"EstimationTools 2.0.1","text":"Bug fixed. Formula handle survival objects without factor classification TTTE_Analytic fixed.","code":""},{"path":"https://jaimemosg.github.io/EstimationTools/news/index.html","id":"estimationtools-200","dir":"Changelog","previous_headings":"","what":"EstimationTools 2.0.0","title":"EstimationTools 2.0.0","text":"CRAN release: 2020-08-03 EstimationTools build R 4.0.2. implemented non-centrality parameter detection. parameter must named ncp custom distribution. implemented computation plots empirical total time test (TTT). Standard error computation now performed inside maxlogL maxlogLreg. Standard errror value now stored list case named ‘fit’. can called typing objectname$fit$StdE, ‘objectname’ object model stored. new method (function) bootstrap_maxlogL created standard error computation bootstrap. ‘summary’ method reports results. perform computation, bootstrap ‘summary’ function deprecated. made careful spelling check documentation.","code":""}]
